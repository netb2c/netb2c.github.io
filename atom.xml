<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Netb2c&#39;s Blog</title>
  <subtitle>We&#39;d better struggle for the future rather than regret for the past.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.unixmen.cn/"/>
  <updated>2017-03-06T06:54:33.000Z</updated>
  <id>http://blog.unixmen.cn/</id>
  
  <author>
    <name>Netb2c</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>广告拦截APP&quot;AdClear&quot; for 安卓/iOS</title>
    <link href="http://blog.unixmen.cn/2017/03/06/%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AAAPPADclear-for-%E5%AE%89%E5%8D%93-iOS/"/>
    <id>http://blog.unixmen.cn/2017/03/06/广告拦截APPADclear-for-安卓-iOS/</id>
    <published>2017-03-06T01:04:36.000Z</published>
    <updated>2017-03-06T06:54:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>良心广告拦截APP分享：<a href="http://seven-china.com/" target="_blank" rel="external">乐网</a>AdClear，视频APP无需会员过滤广告</p>
<ul>
<li>支持手机、平板</li>
<li>支持安卓、iOS</li>
<li>拦截系统内置广告</li>
<li>拦截视频软件广告</li>
<li>自身无广告</li>
<li>本地代理，建立VPN</li>
<li>无需root</li>
</ul>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/adclear.png" alt=""></p>
<p>AppStore及安卓市场都可以搜到<br><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/adclearappstore.jpg" alt=""></p>
<p>从此观看视频一路畅通无阻。<br>Enjoy it！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;良心广告拦截APP分享：&lt;a href=&quot;http://seven-china.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;乐网&lt;/a&gt;AdClear，视频APP无需会员过滤广告&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持手机、平板&lt;/li&gt;
&lt;li&gt;支持
    
    </summary>
    
      <category term="技术文档" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
      <category term="工具" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/"/>
    
    
      <category term="手机APP" scheme="http://blog.unixmen.cn/tags/%E6%89%8B%E6%9C%BAAPP/"/>
    
      <category term="工具" scheme="http://blog.unixmen.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="广告拦截" scheme="http://blog.unixmen.cn/tags/%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA/"/>
    
  </entry>
  
  <entry>
    <title>通过景安免费虚拟主机实现腾讯免费企业邮箱绑定自有域名登陆访问</title>
    <link href="http://blog.unixmen.cn/2017/03/03/%E9%80%9A%E8%BF%87%E6%99%AF%E5%AE%89%E5%85%8D%E8%B4%B9%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E5%AE%9E%E7%8E%B0%E8%85%BE%E8%AE%AF%E5%85%8D%E8%B4%B9%E4%BC%81%E4%B8%9A%E9%82%AE%E7%AE%B1%E7%BB%91%E5%AE%9A%E8%87%AA%E6%9C%89%E5%9F%9F%E5%90%8D%E7%99%BB%E9%99%86%E8%AE%BF%E9%97%AE/"/>
    <id>http://blog.unixmen.cn/2017/03/03/通过景安免费虚拟主机实现腾讯免费企业邮箱绑定自有域名登陆访问/</id>
    <published>2017-03-03T03:53:41.000Z</published>
    <updated>2017-03-06T06:52:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>想用自己的域名发邮件，所以需要为域名开通个邮局业务，呵呵，就想到了免费邮局业务，现在提供免费企业邮局的厂家有很多，如腾讯、阿里、网易等，不过有个问题，就是免费邮局业务，现在都不支持绑定自己的域名进行访问登陆了，，，其实要想解决这个问题也非常的简单，只需要一个虚拟主机和一段PHP代码即可。</p>
<p>由于一直用腾讯微信、QQ，所以就用了腾讯免费企业邮局，通过搜索了解到景安提供的有免费虚拟主机，所以就选择他了，，，，</p>
<p>准备工作：</p>
<ul>
<li>一个域名</li>
<li>已开通腾讯企业邮箱并设置正确解析</li>
<li>一个支持PHP的景安（免费）虚拟主机或者VPS</li>
</ul>
<h2 id="一、创建代码"><a href="#一、创建代码" class="headerlink" title="一、创建代码"></a>一、创建代码</h2><p>复制下面的代码，另存为index.php文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">	$mail = file_get_contents(&quot;http://tel.exmail.qq.com/domain/mail.unixmen.cn&quot;);</div><div class="line">	echo $mail;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li>unixmen.cn 为开通腾讯企业邮箱时所用域名(请改为自己的顶级域名)</li>
<li>mail.unixmen.cn 为计划登陆访问时所用的域名</li>
</ul>
<h2 id="二、开通景安免费虚拟主机，绑定域名并解析"><a href="#二、开通景安免费虚拟主机，绑定域名并解析" class="headerlink" title="二、开通景安免费虚拟主机，绑定域名并解析"></a>二、开通<a href="http://www.zzidc.com/VirtualHost" target="_blank" rel="external">景安免费虚拟主机</a>，绑定域名并解析</h2><ul>
<li>开通主机<br>景安提供的有免费主机（下图左一）<br>建议：如果使用收费的虚拟主机，只做登陆邮箱调转试用，选个便宜的，够用就行，我选了一个最低配置（下图右一）一年才49，土豪请随意。</li>
</ul>
<hr>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/gavhost_7.png" alt=""></p>
<hr>
<p>考虑到虚拟主机还有其他用途，索性就买了个收费的业务。</p>
<hr>
<h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/gavhost_3.png" alt=""></h2><p>注：无论是收费主机还是免费主机，以下操作或功能上没有区别。</p>
<ul>
<li>添加域名绑定<br>景安的虚拟主机如果不添加域名绑定，即便是解析正确，也无法访问，这个略屌。</li>
</ul>
<hr>
<h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/gavhost_9.png" alt=""></h2><ul>
<li>添加解析</li>
</ul>
<h2 id="添加MX记录及添加CNAME解析到景安提供的三级域名。"><a href="#添加MX记录及添加CNAME解析到景安提供的三级域名。" class="headerlink" title="添加MX记录及添加CNAME解析到景安提供的三级域名。"></a>添加MX记录及添加CNAME解析到景安提供的三级域名。</h2><p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/gavhost_5.png" alt=""></p>
<ul>
<li>解析生效</li>
</ul>
<hr>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/gavhost_6.png" alt=""></p>
<h2 id="三、上传脚本程序"><a href="#三、上传脚本程序" class="headerlink" title="三、上传脚本程序"></a>三、上传脚本程序</h2><p>使用FTP工具或者文件管理器将步骤一中创建的index.php文件上传到WEB文件夹中</p>
<hr>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/gavhost_8.png" alt=""></p>
<h2 id="四、测试访问"><a href="#四、测试访问" class="headerlink" title="四、测试访问"></a>四、测试访问</h2><p>如果上面的操作都没有错误的情况下，最后便可输入您的域名进行测试访问了，比如：mail.unixmen.cn<br><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/gavhost_2.png" alt=""></p>
<h2 id="五、至此完成，可以使用自己的域名登陆企业邮箱了。如有问题欢迎吐槽打扰。"><a href="#五、至此完成，可以使用自己的域名登陆企业邮箱了。如有问题欢迎吐槽打扰。" class="headerlink" title="五、至此完成，可以使用自己的域名登陆企业邮箱了。如有问题欢迎吐槽打扰。"></a>五、至此完成，可以使用自己的域名登陆企业邮箱了。如有问题欢迎吐槽打扰。</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想用自己的域名发邮件，所以需要为域名开通个邮局业务，呵呵，就想到了免费邮局业务，现在提供免费企业邮局的厂家有很多，如腾讯、阿里、网易等，不过有个问题，就是免费邮局业务，现在都不支持绑定自己的域名进行访问登陆了，，，其实要想解决这个问题也非常的简单，只需要一个虚拟主机和一段P
    
    </summary>
    
      <category term="技术文档" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
      <category term="工具" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/"/>
    
    
      <category term="其他" scheme="http://blog.unixmen.cn/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Docker 私有仓库无法上传镜像的问题</title>
    <link href="http://blog.unixmen.cn/2017/03/02/Docker-%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E9%95%9C%E5%83%8F%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.unixmen.cn/2017/03/02/Docker-私有仓库无法上传镜像的问题/</id>
    <published>2017-03-02T09:08:16.000Z</published>
    <updated>2017-03-06T06:54:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 私有仓库启动后或者新节点配置私有仓库后，可能会出现无法push镜像到私有仓库，或无法pull镜像的问题如下图：</p>
<ul>
<li>无法push镜像</li>
</ul>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/dockertb403.png" alt=""></p>
<ul>
<li>无法pull镜像</li>
</ul>
<p> <img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/dockertb403_2.png" alt=""></p>
<p><strong>导致原因：</strong><br>因为启动的registry服务不是安全可信赖的</p>
<p><strong> 解决方法如下：</strong></p>
<ul>
<li><p>CentOS 6</p>
<ul>
<li><p>修改docker的配置文件/etc/default/docker，添加下面的内容，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DOCKER_OPTS=&quot;--insecure-registry xxx.xxx.xxx.xxx:5000&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>重启docker服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service docker restart</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>CentOS 7</p>
<ul>
<li><p>创建或修改 /etc/docker/daemon.json 文件，添加如下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;insecure-registries&quot;: [&quot;xxx.xxx.xxx.xxx:5000&quot;]</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>重启Docker 服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart docker</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>测试：</p>
<ul>
<li>push 测试 </li>
</ul>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/dockertb403_1.png" alt=""></p>
<ul>
<li>pull 测试</li>
</ul>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/dockertb403_3.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker 私有仓库启动后或者新节点配置私有仓库后，可能会出现无法push镜像到私有仓库，或无法pull镜像的问题如下图：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无法push镜像&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubuserconten
    
    </summary>
    
      <category term="技术文档" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
      <category term="工具" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/"/>
    
    
      <category term="docker" scheme="http://blog.unixmen.cn/tags/docker/"/>
    
      <category term="容器" scheme="http://blog.unixmen.cn/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="Trouble shooting" scheme="http://blog.unixmen.cn/tags/Trouble-shooting/"/>
    
  </entry>
  
  <entry>
    <title>Docker配置Daocloud加速器</title>
    <link href="http://blog.unixmen.cn/2017/03/02/Docker%E9%85%8D%E7%BD%AEDaocloud%E5%8A%A0%E9%80%9F%E5%99%A8/"/>
    <id>http://blog.unixmen.cn/2017/03/02/Docker配置Daocloud加速器/</id>
    <published>2017-03-02T07:12:31.000Z</published>
    <updated>2017-03-06T06:52:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 版本在 1.12 或更高<br>创建或修改 /etc/docker/daemon.json 文件，修改为如下形式 （请将 加速地址 替换为在加速器页面获取的专属地址）<br><a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="external">Daocloud加速器地址</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;registry-mirrors&quot;: [</div><div class="line">        &quot;加速地址&quot;</div><div class="line">    ],</div><div class="line">    &quot;insecure-registries&quot;: []</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker 版本在 1.12 或更高&lt;br&gt;创建或修改 /etc/docker/daemon.json 文件，修改为如下形式 （请将 加速地址 替换为在加速器页面获取的专属地址）&lt;br&gt;&lt;a href=&quot;https://www.daocloud.io/mirror#acc
    
    </summary>
    
      <category term="技术文档" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
      <category term="工具" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/"/>
    
    
      <category term="docker" scheme="http://blog.unixmen.cn/tags/docker/"/>
    
      <category term="容器" scheme="http://blog.unixmen.cn/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="容器配置" scheme="http://blog.unixmen.cn/tags/%E5%AE%B9%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Docker配置HTTP代理</title>
    <link href="http://blog.unixmen.cn/2017/03/02/Docker%E9%85%8D%E7%BD%AEHTTP%E4%BB%A3%E7%90%86/"/>
    <id>http://blog.unixmen.cn/2017/03/02/Docker配置HTTP代理/</id>
    <published>2017-03-02T07:11:24.000Z</published>
    <updated>2017-03-06T06:52:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于服务器处于内网，无法直接连接docker hub，需要配置代理使用，如图：</p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/docker_no_proxy.png" alt=""></p>
<p>CentOS 6下配置docker 的https_proxy 代理,只需要在/etc/sysconfig/docker 配置文件里面增加配置即可。</p>
<p>CentOS 7 无法使用这样的配置方式进行https_proxy 配置，原因为CentOS 7 使用systemd 来管理进程,我们需要添加https_proxy进行配置，步骤如下：</p>
<ul>
<li>创建目录<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir /etc/systemd/system/docker.service.d</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>添加配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo &quot;[Service]</div><div class="line">Environment=&quot;HTTP_PROXY=http://proxy.ip.com:80&quot;&quot;|tee /etc/systemd/system/docker.service.d/http-proxy.conf</div></pre></td></tr></table></figure>
</li>
<li><p>Reload systemd-daemon</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">systemctl daemon-reload</div></pre></td></tr></table></figure>
</li>
<li><p>重启docker服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart docker</div></pre></td></tr></table></figure>
</li>
<li><p>检查变量是否加载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl show docker --property Environment</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>测试是否生效<br><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/docker_proxy_1.png" alt=""></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于服务器处于内网，无法直接连接docker hub，需要配置代理使用，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/docker_no_proxy.p
    
    </summary>
    
      <category term="技术文档" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
      <category term="工具" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/"/>
    
    
      <category term="docker" scheme="http://blog.unixmen.cn/tags/docker/"/>
    
      <category term="容器" scheme="http://blog.unixmen.cn/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="容器配置" scheme="http://blog.unixmen.cn/tags/%E5%AE%B9%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Docker修改默认存储位置</title>
    <link href="http://blog.unixmen.cn/2017/03/02/Docker%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE/"/>
    <id>http://blog.unixmen.cn/2017/03/02/Docker修改默认存储位置/</id>
    <published>2017-03-02T07:10:23.000Z</published>
    <updated>2017-03-06T06:53:03.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>停止docker</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl stop docker</div></pre></td></tr></table></figure>
</li>
<li><p>备份默认docker存储数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv /var/lib/docker&#123;,.bak&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>创建docker数据存放文件夹</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir /data/docker</div></pre></td></tr></table></figure>
</li>
<li><p>创建软连接</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -s /data/docker/ /var/lib/docker</div></pre></td></tr></table></figure>
</li>
<li><p>启动docker</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl start docker</div></pre></td></tr></table></figure>
</li>
<li><p>查看存储位置<br><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/docker_root.png" alt=""></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;停止docker&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;c
    
    </summary>
    
      <category term="技术文档" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
      <category term="工具" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/"/>
    
    
      <category term="docker" scheme="http://blog.unixmen.cn/tags/docker/"/>
    
      <category term="容器" scheme="http://blog.unixmen.cn/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="容器配置" scheme="http://blog.unixmen.cn/tags/%E5%AE%B9%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>How to Install Docker Engine on CentOS 7.</title>
    <link href="http://blog.unixmen.cn/2017/02/28/How-to-install-docker-engine-on-CentOS-7/"/>
    <id>http://blog.unixmen.cn/2017/02/28/How-to-install-docker-engine-on-CentOS-7/</id>
    <published>2017-02-28T05:32:27.000Z</published>
    <updated>2017-03-06T06:54:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Remove-default-docker-package"><a href="#1-Remove-default-docker-package" class="headerlink" title="1.Remove default docker package."></a>1.Remove default docker package.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum -y remove docker docker-common container-selinux</div><div class="line">yum -y remove docker-selinux</div></pre></td></tr></table></figure>
<h2 id="2-Install-Docker-engine"><a href="#2-Install-Docker-engine" class="headerlink" title="2.Install Docker engine"></a>2.Install Docker engine</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">yum install -y yum-utils</div><div class="line">yum-config-manager --add-repo https://docs.docker.com/engine/installation/linux/repo_files/centos/docker.repo</div><div class="line">yum-config-manager --enable docker-testing</div><div class="line">yum-config-manager --disable docker-testing</div><div class="line">yum makecache fast</div><div class="line">yum -y install docker-engine</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Remove-default-docker-package&quot;&gt;&lt;a href=&quot;#1-Remove-default-docker-package&quot; class=&quot;headerlink&quot; title=&quot;1.Remove default docker packag
    
    </summary>
    
      <category term="技术文档" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
      <category term="工具" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/"/>
    
    
      <category term="docker" scheme="http://blog.unixmen.cn/tags/docker/"/>
    
      <category term="容器" scheme="http://blog.unixmen.cn/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Git利用分支进行开发的工作流程</title>
    <link href="http://blog.unixmen.cn/2017/02/28/Git%E5%88%A9%E7%94%A8%E5%88%86%E6%94%AF%E8%BF%9B%E8%A1%8C%E5%BC%80%E5%8F%91%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
    <id>http://blog.unixmen.cn/2017/02/28/Git利用分支进行开发的工作流程/</id>
    <published>2017-02-28T05:24:47.000Z</published>
    <updated>2017-03-06T06:51:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p>
<h1 id="Git-利用分支进行开发的工作流程"><a href="#Git-利用分支进行开发的工作流程" class="headerlink" title="Git 利用分支进行开发的工作流程"></a>Git 利用分支进行开发的工作流程</h1><p>Git 作为一个源码管理系统，不可避免涉及到多人协作。<br>协作必须有一个规范的工作流程，让大家有效地合作，使得项目井井有条地发展下去。”工作流程”在英语里，叫做”workflow”或者”flow”，原意是水流，比喻项目像水流那样，顺畅、自然地向前流动，不会发生冲击、对撞、甚至漩涡。</p>
<h2 id="一、长期分支"><a href="#一、长期分支" class="headerlink" title="一、长期分支"></a>一、长期分支</h2><h3 id="master-分支"><a href="#master-分支" class="headerlink" title="master 分支"></a>master 分支</h3><p>master 永远处于稳定状态，这个分支代码可以随时用来部署。不允许在该分支直接提交代码。</p>
<h3 id="develop-分支"><a href="#develop-分支" class="headerlink" title="develop 分支"></a>develop 分支</h3><p>开发分支，包含了项目最新的功能和代码，所有开发都在 develop 上进行。一般情况下小的修改直接在这个分支上提交代码。</p>
<h2 id="二、短期分支"><a href="#二、短期分支" class="headerlink" title="二、短期分支"></a>二、短期分支</h2><h3 id="feature-分支"><a href="#feature-分支" class="headerlink" title="feature 分支"></a>feature 分支</h3><p>如果要改的一个东西会有比较多的修改，或者改的东西影响会比较大，请从 develop 分支开出一个 feature 分支，分支名约定为<code>feature/xxx</code>，开发完成后合并回 develop 分支并且删除这个 feature 分支，相应的操作如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b feature/xxx develop</div><div class="line"><span class="comment"># 写代码，提交，写代码，提交。。。</span></div><div class="line"><span class="comment"># feature 开发完成，合并回 develop</span></div><div class="line">$ git checkout develop</div><div class="line"><span class="comment"># 务必加上 --no-ff，以保持分支的合并历史</span></div><div class="line">$ git merge --no-ff feature/xxx</div><div class="line">$ git branch <span class="_">-d</span> feature/xxx</div></pre></td></tr></table></figure>
<p>如果想要当前分支能保持与 develop 的更新，请用 rebase，操作如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 假设当前在 feature/xxx 分支</span></div><div class="line">$ git rebase develop</div></pre></td></tr></table></figure>
<p>rebase 会修改历史，如果你的 feature 分支是跟人合作开发的，请互相做好协调。</p>
<h3 id="release-分支"><a href="#release-分支" class="headerlink" title="release 分支"></a>release 分支</h3><p>当 develop 上的功能和 bug 修得差不多的时候，我们就要发布新版本了，这个时候从 develop 分支上开出一个 release 分支，来做发布前的准备，分支名约定为<code>release/20121221</code>，主要是测试有没有什么 bug，如果有 bug 就直接在这个分支上修复，确定没有问题后就会合并到 master 分支。相应操作如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b release/20121221 develop</div><div class="line"><span class="comment"># 修复 bug、检查没问题后合并到 master 分支并删除</span></div><div class="line">$ git checkout master</div><div class="line">$ git merge --no-ff release/20121221</div></pre></td></tr></table></figure>
<p>为了让 release 分支上 bug 修改作用到 develop 分支，我们还需要把这个 release 分支合并回 develop 分支：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git checkout develop</div><div class="line">$ git merge --no-ff release/20121221</div><div class="line"><span class="comment"># 到此，这个 release 分支完成了它的使命，可以被删除了</span></div><div class="line">$ git branch <span class="_">-d</span> release/20121221</div></pre></td></tr></table></figure>
<h3 id="hotfix-分支"><a href="#hotfix-分支" class="headerlink" title="hotfix 分支"></a>hotfix 分支</h3><p>如果我们发现线上的代码（也就是 master）有 bug，但是这个时候我们的 develop 上的有些功能还没完成，还不能发布，这个时候我们可以从 master 分支上开出一个 hotfix 分支（记住：直接在 master 上提交代码是不允许的！），分支名约定为<code>hotfix/xxx</code>，在这个分支上修改完 bug 后需要把这个分支同时合并到 master 和 develop 分支。相应操作如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b hotfix/xxx master</div><div class="line"><span class="comment"># 修完 bug 后</span></div><div class="line">$ git checkout master</div><div class="line">$ git merge --no-ff hotfix/xxx</div><div class="line">$ git checkout develop</div><div class="line">$ git merge --no-ff hotfix/xxx</div><div class="line"><span class="comment"># hotfix 分支完成使命</span></div><div class="line">$ git branch <span class="_">-d</span> hotfix/xxx</div></pre></td></tr></table></figure>
<p>例外：当 hotfix 分支完成，这个时候如果有 release 分支存在，那么这个 hotfix 就应该合并到 release，而不是 develop 分支。</p>
<h2 id="三、proj-分支"><a href="#三、proj-分支" class="headerlink" title="三、proj 分支"></a>三、proj 分支</h2><p>proj 分支为项目分支，所有的项目分支都从 master 上开出来，约定的分支名为<code>proj/xxx</code>。所有的项目定制内容都直接在项目分支上提交。为了保证项目的更新，每当项目有新版本发布时都需要把 master 分支合并到 proj 分支上。相应操作如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b proj/xxx master</div><div class="line"><span class="comment"># 定制。。。</span></div><div class="line"><span class="comment"># 如果 master 分支有更新</span></div><div class="line">$ git checkout proj/xxx master</div><div class="line">$ git merge --no-ff master</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;Git-利用分支进行开发的工作流程&quot;&gt;&lt;a href=&quot;#Git-利用分支进行开发的工作流程&quot; class=&quot;headerlink&quot; title=&quot;Git 利用分支进行开发的工作流程&quot;&gt;&lt;/a&gt;Git 利用分支进行开发的工作流程&lt;/h1&gt;
    
    </summary>
    
      <category term="技术文档" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
      <category term="工具" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/"/>
    
    
      <category term="git" scheme="http://blog.unixmen.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令</title>
    <link href="http://blog.unixmen.cn/2017/02/28/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://blog.unixmen.cn/2017/02/28/Git常用命令/</id>
    <published>2017-02-28T03:24:49.000Z</published>
    <updated>2017-03-06T06:53:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p>
<h1 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h1><p>Git 命令行操作工作流程</p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/gitcommand.png" alt=""></p>
<ul>
<li>Workspace：工作区</li>
<li>Index / Stage：暂存区</li>
<li>Repository：仓库区（或本地仓库）</li>
<li>Remote：远程仓库</li>
</ul>
<h2 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h2><ul>
<li><p>在当前目录新建一个Git代码库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init</div></pre></td></tr></table></figure>
</li>
<li><p>新建一个目录，将其初始化为Git代码库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init [project-name]</div></pre></td></tr></table></figure>
</li>
<li><p>下载一个项目和它的整个代码历史</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone [url]</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<ul>
<li><p>显示当前的Git配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --list</div></pre></td></tr></table></figure>
</li>
<li><p>编辑Git配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config -e [--global]</div></pre></td></tr></table></figure>
</li>
<li><p>设置提交代码时的用户信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config [--global] user.name &quot;[name]&quot;</div><div class="line">git config [--global] user.email &quot;[email address]&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h2><ul>
<li><p>添加指定文件到暂存区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add [file1] [file2] ...</div></pre></td></tr></table></figure>
</li>
<li><p>添加指定目录到暂存区，包括子目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add [dir]</div></pre></td></tr></table></figure>
</li>
<li><p>添加当前目录的所有文件到暂存区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add .</div></pre></td></tr></table></figure>
</li>
<li><p>添加每个变化前，都会要求确认,对于同一个文件的多处变化，可以实现分次提交</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add -p</div></pre></td></tr></table></figure>
</li>
<li><p>删除工作区文件，并且将这次删除放入暂存区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rm [file1] [file2] ...</div></pre></td></tr></table></figure>
</li>
<li><p>停止追踪指定文件，但该文件会保留在工作区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rm --cached [file]</div></pre></td></tr></table></figure>
</li>
<li><p>改名文件，并且将这个改名放入暂存区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git mv [file-original] [file-renamed]</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h2><ul>
<li><p>提交暂存区到仓库区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m [message]</div></pre></td></tr></table></figure>
</li>
<li><p>提交暂存区的指定文件到仓库区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit [file1] [file2] ... -m [message]</div></pre></td></tr></table></figure>
</li>
<li><p>提交工作区自上次commit之后的变化，直接到仓库区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -a</div></pre></td></tr></table></figure>
</li>
<li><p>提交时显示所有diff信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -v</div></pre></td></tr></table></figure>
</li>
<li><p>使用一次新的commit，替代上一次提交, 如果代码没有任何新变化，则用来改写上一次commit的提交信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit --amend -m [message]</div></pre></td></tr></table></figure>
</li>
<li><p>重做上一次commit，并包括指定文件的新变化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit --amend [file1] [file2] ...</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h2><ul>
<li><p>列出所有本地分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch</div></pre></td></tr></table></figure>
</li>
<li><p>列出所有远程分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -r</div></pre></td></tr></table></figure>
</li>
<li><p>列出所有本地分支和远程分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -a</div></pre></td></tr></table></figure>
</li>
<li><p>新建一个分支，但依然停留在当前分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch [branch-name]</div></pre></td></tr></table></figure>
</li>
<li><p>新建一个分支，并切换到该分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b [branch]</div></pre></td></tr></table></figure>
</li>
<li><p>新建一个分支，指向指定commit</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch [branch] [commit]</div></pre></td></tr></table></figure>
</li>
<li><p>新建一个分支，与指定的远程分支建立追踪关系</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch --track [branch] [remote-branch]</div></pre></td></tr></table></figure>
</li>
<li><p>切换到指定分支，并更新工作区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout [branch-name]</div></pre></td></tr></table></figure>
</li>
<li><p>切换到上一个分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -</div></pre></td></tr></table></figure>
</li>
<li><p>建立追踪关系，在现有分支与指定的远程分支之间</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch --set-upstream [branch] [remote-branch]</div></pre></td></tr></table></figure>
</li>
<li><p>合并指定分支到当前分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git merge [branch]</div></pre></td></tr></table></figure>
</li>
<li><p>选择一个commit，合并进当前分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git cherry-pick [commit]</div></pre></td></tr></table></figure>
</li>
<li><p>删除分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -d [branch-name]</div></pre></td></tr></table></figure>
</li>
<li><p>删除远程分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git push origin --delete [branch-name]</div><div class="line">git branch -dr [remote/branch]</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h2><ul>
<li><p>列出所有tag</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag</div></pre></td></tr></table></figure>
</li>
<li><p>新建一个tag在当前commit</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag [tag]</div></pre></td></tr></table></figure>
</li>
<li><p>新建一个tag在指定commit</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag [tag] [commit]</div></pre></td></tr></table></figure>
</li>
<li><p>删除本地tag</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag -d [tag]</div></pre></td></tr></table></figure>
</li>
<li><p>删除远程tag</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin :refs/tags/[tagName]</div></pre></td></tr></table></figure>
</li>
<li><p>查看tag信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git show [tag]</div></pre></td></tr></table></figure>
</li>
<li><p>提交指定tag</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push [remote] [tag]</div></pre></td></tr></table></figure>
</li>
<li><p>提交所有tag</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push [remote] --tags</div></pre></td></tr></table></figure>
</li>
<li><p>新建一个分支，指向某个tag</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b [branch] [tag]</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h2><ul>
<li><p>显示有变更的文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git status</div></pre></td></tr></table></figure>
</li>
<li><p>显示当前分支的版本历史</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log</div></pre></td></tr></table></figure>
</li>
<li><p>显示commit历史，以及每次commit发生变更的文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log --stat</div></pre></td></tr></table></figure>
</li>
<li><p>搜索提交历史，根据关键词</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log -S [keyword]</div></pre></td></tr></table></figure>
</li>
<li><p>显示某个commit之后的所有变动，每个commit占据一行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log [tag] HEAD --pretty=format:%s</div></pre></td></tr></table></figure>
</li>
<li><p>显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log [tag] HEAD --grep feature</div></pre></td></tr></table></figure>
</li>
<li><p>显示某个文件的版本历史，包括文件改名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git log --follow [file]</div><div class="line">git whatchanged [file]</div></pre></td></tr></table></figure>
</li>
<li><p>显示指定文件相关的每一次diff</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log -p [file]</div></pre></td></tr></table></figure>
</li>
<li><p>显示过去5次提交</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log -5 --pretty --oneline</div></pre></td></tr></table></figure>
</li>
<li><p>显示所有提交过的用户，按提交次数排序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git shortlog -sn</div></pre></td></tr></table></figure>
</li>
<li><p>显示指定文件是什么人在什么时间修改过</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git blame [file]</div></pre></td></tr></table></figure>
</li>
<li><p>显示暂存区和工作区的差异</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git diff</div></pre></td></tr></table></figure>
</li>
<li><p>显示暂存区和上一个commit的差异</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git diff --cached [file]</div></pre></td></tr></table></figure>
</li>
<li><p>显示工作区与当前分支最新commit之间的差异</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git diff HEAD</div></pre></td></tr></table></figure>
</li>
<li><p>显示两次提交之间的差异</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git diff [first-branch]...[second-branch]</div></pre></td></tr></table></figure>
</li>
<li><p>显示今天你写了多少行代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>显示某次提交的元数据和内容变化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git show [commit]</div></pre></td></tr></table></figure>
</li>
<li><p>显示某次提交发生变化的文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git show --name-only [commit]</div></pre></td></tr></table></figure>
</li>
<li><p>显示某次提交时，某个文件的内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git show [commit]:[filename]</div></pre></td></tr></table></figure>
</li>
<li><p>显示当前分支的最近几次提交</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reflog</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h2><ul>
<li><p>下载远程仓库的所有变动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git fetch [remote]</div></pre></td></tr></table></figure>
</li>
<li><p>显示所有远程仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote -v</div></pre></td></tr></table></figure>
</li>
<li><p>显示某个远程仓库的信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote show [remote]</div></pre></td></tr></table></figure>
</li>
<li><p>增加一个新的远程仓库，并命名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add [shortname] [url]</div></pre></td></tr></table></figure>
</li>
<li><p>取回远程仓库的变化，并与本地分支合并</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull [remote] [branch]</div></pre></td></tr></table></figure>
</li>
<li><p>上传本地指定分支到远程仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push [remote] [branch]</div></pre></td></tr></table></figure>
</li>
<li><p>强行推送当前分支到远程仓库，即使有冲突</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push [remote] --force</div></pre></td></tr></table></figure>
</li>
<li><p>推送所有分支到远程仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push [remote] --all</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h2><ul>
<li><p>恢复暂存区的指定文件到工作区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout [file]</div></pre></td></tr></table></figure>
</li>
<li><p>恢复某个commit的指定文件到暂存区和工作区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout [commit] [file]</div></pre></td></tr></table></figure>
</li>
<li><p>恢复暂存区的所有文件到工作区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout .</div></pre></td></tr></table></figure>
</li>
<li><p>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset [file]</div></pre></td></tr></table></figure>
</li>
<li><p>重置暂存区与工作区，与上一次commit保持一致</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset --hard</div></pre></td></tr></table></figure>
</li>
<li><p>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset [commit]</div></pre></td></tr></table></figure>
</li>
<li><p>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset --hard [commit]</div></pre></td></tr></table></figure>
</li>
<li><p>重置当前HEAD为指定commit，但保持暂存区和工作区不变</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset --keep [commit]</div></pre></td></tr></table></figure>
</li>
<li><p>新建一个commit，用来撤销指定commit</p>
</li>
<li><p>后者的所有变化都将被前者抵消，并且应用到当前分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git revert [commit]</div></pre></td></tr></table></figure>
</li>
<li><p>暂时将未提交的变化移除，稍后再移入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git stash</div><div class="line">git stash pop</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h2><ul>
<li>生成一个可供发布的压缩包<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git archive</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;Git常用命令&quot;&gt;&lt;a href=&quot;#Git常用命令&quot; class=&quot;headerlink&quot; title=&quot;Git常用命令&quot;&gt;&lt;/a&gt;Git常用命令&lt;/h1&gt;&lt;p&gt;Git 命令行操作工作流程&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https:
    
    </summary>
    
      <category term="技术文档" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
      <category term="工具" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/"/>
    
    
      <category term="git" scheme="http://blog.unixmen.cn/tags/git/"/>
    
      <category term="git command" scheme="http://blog.unixmen.cn/tags/git-command/"/>
    
      <category term="git 命令行" scheme="http://blog.unixmen.cn/tags/git-%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>Git 基础操作</title>
    <link href="http://blog.unixmen.cn/2017/02/18/Git-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
    <id>http://blog.unixmen.cn/2017/02/18/Git-基础操作/</id>
    <published>2017-02-17T16:59:59.000Z</published>
    <updated>2017-03-06T06:51:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git-是什么"><a href="#Git-是什么" class="headerlink" title="Git 是什么"></a>Git 是什么</h2><ul>
<li>是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</li>
<li>是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</li>
<li>与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</li>
</ul>
<h2 id="Git-与-SVN-区别"><a href="#Git-与-SVN-区别" class="headerlink" title="Git 与 SVN 区别"></a>Git 与 SVN 区别</h2><p>GIT不仅仅是个版本控制系统，它也是个内容管理系统(CMS),工作管理系统等。<br>如果你是一个具有使用SVN背景的人，你需要做一定的思想转换，来适应GIT提供的一些概念和特征。</p>
<h4 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h4><ul>
<li>GIT是分布式的，SVN不是：这是GIT和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。</li>
<li>GIT把内容按元数据方式存储，而SVN是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。</li>
<li>GIT分支和SVN的分支不同：分支在SVN中一点不特别，就是版本库中的另外的一个目录。</li>
<li>GIT没有一个全局的版本号，而SVN有：目前为止这是跟SVN相比GIT缺少的最大的一个特征。</li>
<li>GIT的内容完整性要优于SVN：GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</li>
</ul>
<h2 id="快速入门："><a href="#快速入门：" class="headerlink" title="快速入门："></a>快速入门：</h2><h4 id="如何安装："><a href="#如何安装：" class="headerlink" title="如何安装："></a>如何安装：</h4><p><a href="https://git-for-windows.github.io/" target="_blank" rel="external">Windows Git 安装包下载</a></p>
<p><a href="https://git-scm.com/download/mac" target="_blank" rel="external">Mac Git 安装包下载</a></p>
<p><a href="https://git-scm.com/download/linux" target="_blank" rel="external">Linux 安装教程</a></p>
<h4 id="创建新仓库"><a href="#创建新仓库" class="headerlink" title="创建新仓库"></a>创建新仓库</h4><p>创建新的 git 仓库：</p>
<ul>
<li>创建新文件夹</li>
<li>进入新文件夹</li>
<li>命令行执行”git init”</li>
</ul>
<p>实例：</p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/git_init.png" alt=""></p>
<p>以上操作将创建一个名为 .git 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。 但是，在这个时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪。点击<a href="https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-%E5%BA%95%E5%B1%82%E5%91%BD%E4%BB%A4%E5%92%8C%E9%AB%98%E5%B1%82%E5%91%BD%E4%BB%A4#_git_internals" target="_blank" rel="external">链接</a>获取更多关于.git文件夹中包含了文件的信息。</p>
<p>如果你是在一个<strong>非空文件夹</strong>中初始化，需要：</p>
<ul>
<li>添加跟踪（git add）</li>
<li>提交（git commit）</li>
</ul>
<p>实例：</p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/git_add_init.png" alt=""></p>
<h4 id="获取Git仓库"><a href="#获取Git仓库" class="headerlink" title="获取Git仓库"></a>获取Git仓库</h4><p>执行如下命令以创建一个本地仓库的克隆版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/netb2c/netb2c.github.io.git</div></pre></td></tr></table></figure></p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/git_clone.png" alt=""></p>
<p>如果是远端服务器上的仓库,可使用SSH传输协议:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone git@10.160.0.200:/data/sdk_svnserver/netb2c.git</div></pre></td></tr></table></figure></p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/git_clone_1.png" alt=""></p>
<h4 id="检查当前文件状态"><a href="#检查当前文件状态" class="headerlink" title="检查当前文件状态"></a>检查当前文件状态</h4><p>要查看哪些文件处于什么状态，可以用 git status 命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git status</div></pre></td></tr></table></figure></p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/git_status.png" alt=""></p>
<p>以上反馈信息显示：</p>
<ul>
<li>当前所在工作目录相当干净</li>
<li>所有已跟踪文件在上次提交后都未被更改过</li>
<li>当前目录下没有出现任何处于未跟踪状态的新文件</li>
<li>显示了当前所在分支(“master”)</li>
</ul>
<h4 id="添加、修改文件测试："><a href="#添加、修改文件测试：" class="headerlink" title="添加、修改文件测试："></a>添加、修改文件测试：</h4><p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/git_status_1.png" alt=""></p>
<p>以上打印信息可以看到：</p>
<ul>
<li><p>daily_task.md 文件在Changes not staged for commit下面：<br>– 文件内容发生便会<br>– 未在暂存区<br>需要保存到暂存区，需要执行”git add” 暂存修改</p>
</li>
<li><p>新建的 README.md 文件现在 Untracked files 下面：<br>– 新文件未被跟踪<br>– 新闻界需要添加跟踪</p>
</li>
</ul>
<h4 id="跟踪新文件"><a href="#跟踪新文件" class="headerlink" title="跟踪新文件"></a>跟踪新文件</h4><p>使用命令 git add 开始跟踪一个文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add</div></pre></td></tr></table></figure></p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/git_add.png" alt=""></p>
<p>正常情况下不会打印信息。</p>
<p>再次查看状态：</p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/git_status_2.png" alt=""></p>
<ul>
<li>两个文档都在Changes to be committed下:<h2 id="–-此时已暂时保存当前文档状态"><a href="#–-此时已暂时保存当前文档状态" class="headerlink" title="– 此时已暂时保存当前文档状态"></a>– 此时已暂时保存当前文档状态</h2>注：git add 只是将增加、修改后文件添加内容到下一次提交中”而不是“将文件直接添加到项目中”</li>
</ul>
<h4 id="简略状态信息查看"><a href="#简略状态信息查看" class="headerlink" title="简略状态信息查看"></a>简略状态信息查看</h4><p>git status 命令的输出十分详细，但其用语有些繁琐。<br>如果你使用 git status -s 命令或 git status –short 命令，你将得到一种更为紧凑的格式输出，如图：</p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/git_status_4.png" alt=""></p>
<ul>
<li>A：新增</li>
<li>M：修改</li>
<li>??：未被跟踪</li>
</ul>
<h4 id="查看已暂存和未暂存的修改"><a href="#查看已暂存和未暂存的修改" class="headerlink" title="查看已暂存和未暂存的修改"></a>查看已暂存和未暂存的修改</h4><p>git status 命令的输出对于你来说过于模糊，你想知道具体修改了什么地方，可以用 git diff 命令。</p>
<ul>
<li><p>要查看<strong>尚未暂存</strong>的文件更新了哪些部分，不加参数直接输入 git diff<br><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/git_diff.png" alt=""></p>
</li>
<li><p>若要查看<strong>已暂存的将要添加到下次提交里</strong>的内容，需用  git diff –staged<br><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/git_diff_1.png" alt=""></p>
</li>
</ul>
<h4 id="提交更新"><a href="#提交更新" class="headerlink" title="提交更新"></a>提交更新</h4><p>暂存区域已经准备妥当可以提交了。<br>一定要确认还有什么修改过的或新建的文件还没有 git add 过，否则提交的时候不会记录这些还没暂存起来的变化。 这些修改过的文件只保留在本地磁盘。 所以，每次准备提交前，先用 git status 看下，是不是都已暂存起来了， 然后再运行提交命令 git commit：</p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/git_commit.png" alt=""></p>
<h5 id="跳过使用暂存区域"><a href="#跳过使用暂存区域" class="headerlink" title="跳过使用暂存区域"></a>跳过使用暂存区域</h5><p> Git 提供了一个跳过使用暂存区域的方式， 只要在提交的时候，给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤，详见下图：</p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/git_commit_1.png" alt=""></p>
<h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p>要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。 可以用 git rm 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。</p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/git_commit_2.png" alt=""></p>
<p>正确的删除版本控制库文件需要：</p>
<ul>
<li>删除本地文件： rm file</li>
<li>从版本控制库中删除： git rm file</li>
<li>提交更新： git commit -m “Commit message.”</li>
</ul>
<h4 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h4><p>Git 并不显式跟踪文件移动操作。 如果在 Git 中重命名了某个文件，仓库中存储的元数据并不会体现出这是一次改名操作。<br>需要使用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git mv old_name new_name</div></pre></td></tr></table></figure></p>
<p>实例：</p>
<p><img src="https://raw.githubusercontent.com/netb2c/MarkdownPhotos/master/git_rename.png" alt=""></p>
<p>其实，运行 git mv 就相当于运行了下面三条命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mv README.md README</div><div class="line">git rm README.md</div><div class="line">git add README</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Git-是什么&quot;&gt;&lt;a href=&quot;#Git-是什么&quot; class=&quot;headerlink&quot; title=&quot;Git 是什么&quot;&gt;&lt;/a&gt;Git 是什么&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。&lt;/li&gt;
&lt;li
    
    </summary>
    
      <category term="技术文档" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
      <category term="工具" scheme="http://blog.unixmen.cn/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Tools/"/>
    
    
      <category term="git" scheme="http://blog.unixmen.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>感恩</title>
    <link href="http://blog.unixmen.cn/2017/02/17/%E6%84%9F%E6%81%A9/"/>
    <id>http://blog.unixmen.cn/2017/02/17/感恩/</id>
    <published>2017-02-17T03:06:56.000Z</published>
    <updated>2017-02-17T06:09:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="感恩"><a href="#感恩" class="headerlink" title="感恩"></a>感恩</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[感恩]是快乐的来源，</div><div class="line">感恩天地，生命之源</div><div class="line">感恩阳光，托起梦想</div><div class="line">感恩万物，助我成长</div><div class="line">感恩父母，赐予生命</div><div class="line">感恩兄弟，手足情深</div><div class="line">感恩某人，冤家聚首</div><div class="line">感恩孩子，舐犊情深</div><div class="line">感恩恩师，淳淳教诲</div><div class="line">感恩朋友，知心之谊</div><div class="line">感恩同袍，携手同行</div><div class="line">感恩领导，不吝提携</div><div class="line">感恩公司，给我平台</div><div class="line">感恩挫折，让我成长</div><div class="line">感恩命运，让我懂得</div><div class="line">感恩黑暗，让我领悟</div><div class="line">感恩科技，建立博客</div><div class="line">感恩，感恩，感恩....</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;感恩&quot;&gt;&lt;a href=&quot;#感恩&quot; class=&quot;headerlink&quot; title=&quot;感恩&quot;&gt;&lt;/a&gt;感恩&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
    
    </summary>
    
      <category term="生活" scheme="http://blog.unixmen.cn/categories/Life/"/>
    
    
      <category term="感恩" scheme="http://blog.unixmen.cn/tags/%E6%84%9F%E6%81%A9/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博客</title>
    <link href="http://blog.unixmen.cn/2017/02/17/first/"/>
    <id>http://blog.unixmen.cn/2017/02/17/first/</id>
    <published>2017-02-17T03:03:39.000Z</published>
    <updated>2017-02-17T06:10:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>就这么开始吧，精彩内容敬请期待…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;就这么开始吧，精彩内容敬请期待…&lt;/p&gt;

    
    </summary>
    
      <category term="生活" scheme="http://blog.unixmen.cn/categories/Life/"/>
    
    
      <category term="开篇" scheme="http://blog.unixmen.cn/tags/%E5%BC%80%E7%AF%87/"/>
    
  </entry>
  
</feed>
